{
    "version": "https://jsonfeed.org/version/1",
    "title": "王奥的个人博客 • All posts by \"天道酬勤   厚德载物\" tag",
    "description": "",
    "home_page_url": "https://vf77.cn",
    "items": [
        {
            "id": "https://vf77.cn/2021/04/08/4-08/",
            "url": "https://vf77.cn/2021/04/08/4-08/",
            "title": "微信支付",
            "date_published": "2021-04-08T02:12:21.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/04/06/4-06/",
            "url": "https://vf77.cn/2021/04/06/4-06/",
            "title": "redis集合",
            "date_published": "2021-04-06T13:15:15.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">集合内的数据是无序的,并且集合里面的数据具有唯一性</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis集合set\"><a class=\"markdownIt-Anchor\" href=\"#redis集合set\">#</a> Redis 集合（set）</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加数据: sadd key item其中item项可以有多个</span><br><span class=\"line\">获取集合中的所有元素: smembers key</span><br><span class=\"line\">判断元素是否在集合中: sismember key item 若是在返回<span class=\"number\">1</span> 反之则返回<span class=\"number\">0</span></span><br><span class=\"line\">删除元素: srem key item</span><br><span class=\"line\">获取集合中元素的个数: scard key</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"D:%5CHexo%5Cblog%5Cimg%5Csnipaste20210406_212128.png\" alt=\"\"></p>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/03/28/3-28/",
            "url": "https://vf77.cn/2021/03/28/3-28/",
            "title": "工单 --- 总结",
            "date_published": "2021-03-28T13:53:31.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"工单\"><a class=\"markdownIt-Anchor\" href=\"#工单\">#</a> 工单</h4>\n<p>在实现工单功能的过程中我们学习了:<br>\nDocker,redis, 链接池，异步，权限模型，位语运算，动态表单，MongoDB, 聊天存储，等</p>\n<h5 id=\"docker\"><a class=\"markdownIt-Anchor\" href=\"#docker\">#</a> Docker</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Docker是一个开源的应用容器引擎,可以让开发者打包他们的应用以及依赖包到一个可移植性的镜像中</span><br><span class=\"line\">\t例子:我们前去旅游需要背着背包,但是我们可以骑车,虽然车也有重量,但是我们并不需要背着车,车是来给我们减轻负担的</span><br><span class=\"line\"><span class=\"comment\"># 其中关于Docker的命令可以查看我之前的笔记</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"redis\"><a class=\"markdownIt-Anchor\" href=\"#redis\">#</a> Redis</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis是一个开源的使用ANSI C语言编写,支持网络,可基于内存亦可持久化的日志型、Key-Value数据库,并提供多种语言的API</span><br><span class=\"line\">Redis可以进行大量的读写操作,这是由于其底层数据是二进制</span><br><span class=\"line\">Redis和MySql的区别类似于:</span><br><span class=\"line\">    MySql进行数据交互时,类似于两个不同国家之前的人相互交流,但是他们都不会说彼此的语言,所以中间需要一个翻译官</span><br><span class=\"line\">    Redis则是两个人彼此都会说同一种语言,所以不需要翻译官来进行翻译所以性能比较高</span><br></pre></td></tr></table></figure>\n<h5 id=\"链接池\"><a class=\"markdownIt-Anchor\" href=\"#链接池\">#</a> 链接池</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 链接池 --- 节约了建立链接和关闭链接的操作(可以帮助我们提高效率)</span></span><br><span class=\"line\">pool = redis.ConnectionPool()</span><br><span class=\"line\"><span class=\"comment\"># 从链接池获取链接</span></span><br><span class=\"line\">conn = redis.Redis(connection_pool=pool)</span><br><span class=\"line\">conn.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn.get(<span class=\"string\">&quot;test1&quot;</span>))</span><br><span class=\"line\">例子: 在生活中就类似于学校食堂中的那个打饭的勺子</span><br></pre></td></tr></table></figure>\n<h5 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 异步使用 async 关键字</span></span><br><span class=\"line\"><span class=\"comment\"># 当方法前面加上了 async 那么就变为了一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">\t\t<span class=\"comment\"># 在异步方法内部所有的耗时操作(调用别的方法或调别的外部的方法)都必须加上 await(不需要等待,主动给你返回结果) 当有await存在时那么就绝对存在async</span></span><br><span class=\"line\">\t\tr = <span class=\"keyword\">await</span> client.get(url,params=data)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">        <span class=\"comment\"># 建立任务列表</span></span><br><span class=\"line\">        task_list = []</span><br><span class=\"line\">        <span class=\"comment\"># 写个循环 (类似于修跑道)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        \t<span class=\"comment\"># 将你要异步执行的东西塞到这里列表里面</span></span><br><span class=\"line\">            req = request(client)</span><br><span class=\"line\">            task = asyncio.create_task(req)</span><br><span class=\"line\">            task_list.append(task)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.gether(*task_list)</span><br><span class=\"line\"><span class=\"comment\"># 类似于 10 个人进行跑步,同步只有一条跑道,而异步却有10条跑道</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"权限模型\"><a class=\"markdownIt-Anchor\" href=\"#权限模型\">#</a> 权限模型</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">权限模型: ACL   RBAC   ABAC</span><br><span class=\"line\">ACL是基于用户的权限认证体系 三表(用户,关系,节点) 关系表关联着用户表,节点表(过于麻烦,用户量小的时候可以使用)</span><br><span class=\"line\">RBAC基于ACL权限模型上多了一张表 四表(用户,关系,节点,角色) 用户关联角色,关系表关联角色表,节点表(不用针对每个用户进行授权,只需要针对用户进行授权)</span><br><span class=\"line\">ABAC基于属性(细节化)的权限认证体系</span><br></pre></td></tr></table></figure>\n<h5 id=\"位语运算\"><a class=\"markdownIt-Anchor\" href=\"#位语运算\">#</a> 位语运算</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">位语运算(判断偶):要判断的数据 &amp; <span class=\"number\">1</span> 如果返回值为<span class=\"number\">0</span>则为偶数,反之则为奇数</span><br><span class=\"line\">位语运算是直接对整数在内存中的二进制位进行操作,所以其使用效率特别的高效</span><br><span class=\"line\">十进制转换二进制: <span class=\"built_in\">bin</span>(十进制数据)</span><br><span class=\"line\">简单思想:开始数据%<span class=\"number\">2</span>得到余数 开始数据//<span class=\"number\">2</span>得到整数 再拿得到的整数%<span class=\"number\">2</span>得到余数 按照这个顺序除到无法再除,再进行倒序排列即可: <span class=\"number\">13</span> 得到<span class=\"number\">1011</span> 二进制<span class=\"number\">0b1101</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"动态表单\"><a class=\"markdownIt-Anchor\" href=\"#动态表单\">#</a> 动态表单</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态表单,是数据库中的数据使用动态绑定,也就是说数据的来源是从数据库或者其他地方来的,不是直接写死上面的,从而在前端生成一张表</span><br></pre></td></tr></table></figure>\n<h5 id=\"mongodb\"><a class=\"markdownIt-Anchor\" href=\"#mongodb\">#</a> MongoDB</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB是一个基于分布式文件存储的数据库,由C++语言编写而成,旨在为Web应用提供可扩展的高性能数据库存储解决方案</span><br><span class=\"line\">MongoDB是一个高性能、易部署、易使用，存储数据非常方便的数据库</span><br><span class=\"line\">MongoDB和Redis一样都是NO MySql类型数据库</span><br><span class=\"line\"><span class=\"comment\"># 关于Mongo的命令可以查看我之前的笔记</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"聊天存储\"><a class=\"markdownIt-Anchor\" href=\"#聊天存储\">#</a> 聊天存储</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">聊天存储,由于其交互非常的频繁所以我们需要使用到Redis或者MongoDB</span><br><span class=\"line\">若是想要无延迟的展示到页面上,需要使用到Websocket</span><br><span class=\"line\">WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/03/22/3-22/",
            "url": "https://vf77.cn/2021/03/22/3-22/",
            "title": "七牛云",
            "date_published": "2021-03-22T13:17:24.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"七牛云\"><a class=\"markdownIt-Anchor\" href=\"#七牛云\">#</a> 七牛云</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先需要下载 pip install qiniu</span></span><br><span class=\"line\"><span class=\"comment\"># 进行导包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> qiniu <span class=\"keyword\">import</span> Auth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这一步是获取到七牛云Token</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiu</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        q = Auth(<span class=\"string\">&#x27;用户密钥管理中的AK&#x27;</span>, <span class=\"string\">&#x27;用户密钥管理中的SK&#x27;</span>)</span><br><span class=\"line\">        token = q.upload_token(<span class=\"string\">&#x27;你所创建的应用名称&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(token)</span><br><span class=\"line\">        res = &#123;&#125;</span><br><span class=\"line\">        res[<span class=\"string\">&#x27;uptoken&#x27;</span>] = token</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(res)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;七牛云&lt;/h1&gt;</span><br><span class=\"line\">    &#123;&#123; imgLoadPercent &#125;&#125;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">input</span> @change=<span class=\"string\">&quot;uploadInputchange&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;uploadFileInput&quot;</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      uptoken: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      imgLoadPercent: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    get_token() &#123;</span><br><span class=\"line\">      // 这里是获取七牛云token那个路由</span><br><span class=\"line\">      this.axios.get(&quot;http://localhost:8000/uptoken/&quot;).then((result) =&gt; &#123;</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\">        this.uptoken = result.data.uptoken;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //触发<span class=\"built_in\">input</span> change事件</span><br><span class=\"line\">    uploadInputchange() &#123;</span><br><span class=\"line\">      let file = document.getElementById(<span class=\"string\">&quot;uploadFileInput&quot;</span>).files[<span class=\"number\">0</span>]; //选择的图片文件</span><br><span class=\"line\">      this.get_token();</span><br><span class=\"line\">      this.uploadImgToQiniu(file);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //上传图片到七牛</span><br><span class=\"line\">    uploadImgToQiniu(file) &#123;</span><br><span class=\"line\">      console.log(this.uptoken);</span><br><span class=\"line\"></span><br><span class=\"line\">      const axiosInstance = this.axios.create(&#123; withCredentials: false &#125;); //withCredentials 禁止携带cookie，带cookie在七牛上有可能出现跨域问题</span><br><span class=\"line\">      let data = new FormData();</span><br><span class=\"line\">      data.append(<span class=\"string\">&quot;token&quot;</span>, this.uptoken); //七牛需要的token</span><br><span class=\"line\">      data.append(<span class=\"string\">&quot;file&quot;</span>, file);</span><br><span class=\"line\">      axiosInstance(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        url: <span class=\"string\">&quot;http://up-z1.qiniu.com/&quot;</span>, //上传地址，华北的空间是 up-z1.qiniu.com</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">        timeout: <span class=\"number\">300000000</span>, //超时时间，因为图片上传有可能需要很久</span><br><span class=\"line\">        onUploadProgress: (e) =&gt; &#123;</span><br><span class=\"line\">          //imgLoadPercent 是上传进度，可以用来添加进度条</span><br><span class=\"line\"></span><br><span class=\"line\">          var complete = e.loaded / e.total;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (complete &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            this.imgLoadPercent = (complete * <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;%&quot;</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">        .then((data) =&gt; &#123;</span><br><span class=\"line\">          console.log(data);</span><br><span class=\"line\">          this.imgLoadPercent = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(function (err) &#123;</span><br><span class=\"line\">          //上传失败</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/03/19/3-19/",
            "url": "https://vf77.cn/2021/03/19/3-19/",
            "title": "数据库链接池,异步",
            "date_published": "2021-03-19T10:41:17.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"数据库链接池\"><a class=\"markdownIt-Anchor\" href=\"#数据库链接池\">#</a> 数据库链接池</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 链接池 --- 节约了建立链接和关闭链接的操作(可以帮助我们提高效率)</span></span><br><span class=\"line\">pool = redis.ConnectionPool()</span><br><span class=\"line\"><span class=\"comment\"># 从链接池获取链接</span></span><br><span class=\"line\">conn = redis.Redis(connection_pool=pool)</span><br><span class=\"line\">conn.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn.get(<span class=\"string\">&quot;test1&quot;</span>))</span><br><span class=\"line\">例子: 在生活中就类似于学校食堂中的那个打饭的勺子</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 异步使用 async 关键字</span></span><br><span class=\"line\"><span class=\"comment\"># 当方法前面加上了 async 那么就变为了一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">\t\t<span class=\"comment\"># 在异步方法内部所有的耗时操作(调用别的方法或调别的外部的方法)都必须加上 await(不需要等待,主动给你返回结果) 当有await存在时那么就绝对存在async</span></span><br><span class=\"line\">\t\tr = <span class=\"keyword\">await</span> client.get(url,params=data)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">        <span class=\"comment\"># 建立任务列表</span></span><br><span class=\"line\">        task_list = []</span><br><span class=\"line\">        <span class=\"comment\"># 写个循环 (类似于修跑道)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        \t<span class=\"comment\"># 将你要异步执行的东西塞到这里列表里面</span></span><br><span class=\"line\">            req = request(client)</span><br><span class=\"line\">            task = asyncio.create_task(req)</span><br><span class=\"line\">            task_list.append(task)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.gether(*task_list)</span><br><span class=\"line\"><span class=\"comment\"># 类似于 10 个人进行跑步,同步只有一条跑道,而异步却有10条跑道</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/03/18/3-18/",
            "url": "https://vf77.cn/2021/03/18/3-18/",
            "title": "MongoDB",
            "date_published": "2021-03-18T13:06:54.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"mongodb基础命令\"><a class=\"markdownIt-Anchor\" href=\"#mongodb基础命令\">#</a> MongoDB 基础命令</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shwo dbs   查看所有数据库</span><br><span class=\"line\">use 数据库名   (若是有该数据库则进入,若是没有则创建)</span><br><span class=\"line\">db   查看当前所在的数据库</span><br><span class=\"line\">db.createCollection(<span class=\"string\">&quot;表名&quot;</span>)   创建表</span><br><span class=\"line\">show tables  |  show collections   查看该数据库内的所有表</span><br><span class=\"line\">db.表名.insert()   向被指定的表内添加数据</span><br><span class=\"line\">db.表名.find()   查看被指定表内的所有数据 也可以增加限制条件 dinf_one() 是只查看一个</span><br><span class=\"line\">db.dropDatabase()   删除当前所在的数据库</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在python中添加数据库:</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\"><span class=\"comment\"># 和MongoDB建立连接</span></span><br><span class=\"line\">mongo_client = pymongo.MongoClient(host=<span class=\"string\">&quot;localhost&quot;</span>, port=<span class=\"number\">27017</span>)</span><br><span class=\"line\"><span class=\"comment\"># 与某个数据库建立连接</span></span><br><span class=\"line\">db = mongo_client.数据库</span><br><span class=\"line\"><span class=\"comment\"># 与数据库中的某一个表</span></span><br><span class=\"line\">table = db.表名</span><br><span class=\"line\"><span class=\"comment\"># find_one是查找一个</span></span><br><span class=\"line\"><span class=\"comment\"># find是查找多个</span></span><br><span class=\"line\">res = table.find_one(&#123;<span class=\"string\">&quot;tid&quot;</span>: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\">res = <span class=\"built_in\">eval</span>(res[<span class=\"string\">&quot;tem&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/03/02/3-02/",
            "url": "https://vf77.cn/2021/03/02/3-02/",
            "title": "百度云识别本地图片文字",
            "date_published": "2021-03-02T07:35:25.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"报错修正\"><a class=\"markdownIt-Anchor\" href=\"#报错修正\">#</a> 报错修正</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今天中午在使用Vue,ant-design-vue组件时报错了一个: </span><br><span class=\"line\">did you register the component correctly? For recursive components, make sure to provide the &quot;name&quot; option. 得错误</span><br><span class=\"line\">这个错误的大致意思为: 组件错误</span><br><span class=\"line\">我们可以通过仔细检查组件是否正确来更改次错误</span><br><span class=\"line\">\t我这里是由于少了一行组件的代码导致错误的: 错误如下</span><br><span class=\"line\">        \t<span class=\"keyword\">import</span> ant <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ant-design-vue&#x27;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">import</span> <span class=\"string\">&#x27;ant-design-vue/dist/antd.css&#x27;</span></span><br><span class=\"line\">\t\t// Vue.use(ant)</span><br><span class=\"line\">因此只需要将 Vue.use(ant)取消注释即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"百度云识别本地图片文字\"><a class=\"markdownIt-Anchor\" href=\"#百度云识别本地图片文字\">#</a> 百度云识别本地图片文字</h4>\n<p>转载自: <span class=\"exturl\" data-url=\"aHR0cHM6Ly92M3UuY24vYV9pZF8xMzQ=\">https://v3u.cn/a_id_134</span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们首先需要在百度云的文字识别模块内建立一个应用,并且获取到该应用的: API Key 和 Secret Key</span></span><br><span class=\"line\">res = requests.get(<span class=\"string\">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=(你的API Key)&amp;client_secret=(你的Secret Key)&quot;</span>)</span><br><span class=\"line\">res = json.loads(<span class=\"built_in\">str</span>(res.text))</span><br><span class=\"line\">token = res[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">temp_url = <span class=\"string\">&#x27;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=&#x27;</span> + token</span><br><span class=\"line\">temp_headers = &#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将图片验证码保存到本地,这里我们并不需要担心图片验证码过多,我们已经将要保存的图片进行了命名,所以会顶替掉</span></span><br><span class=\"line\">img_src = <span class=\"string\">&quot;http://localhost:8000/code/&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 这里的路径可以自己设置</span></span><br><span class=\"line\">urllib.request.urlretrieve(img_src, <span class=\"string\">&#x27;C:/Users/guao/Desktop/jie图/Ceshi/1.png&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 所读取的文件路径</span></span><br><span class=\"line\">temp_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;C:/Users/guao/Desktop/jie图/Ceshi/1.png&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">temp_image = temp_file.read()</span><br><span class=\"line\">temp_file.close()</span><br><span class=\"line\">temp_data = &#123;<span class=\"string\">&#x27;image&#x27;</span>: base64.b64encode(temp_image)&#125;</span><br><span class=\"line\">temp_data = urllib.parse.urlencode(temp_data)</span><br><span class=\"line\">temp_res = requests.post(url=temp_url, data=temp_data, headers=temp_headers)</span><br><span class=\"line\"></span><br><span class=\"line\">res = json.loads(<span class=\"built_in\">str</span>(temp_res.text))</span><br><span class=\"line\">code = res[<span class=\"string\">&#x27;words_result&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;words&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(code)</span><br><span class=\"line\"><span class=\"comment\"># 由于百度云所识别的文字有可能含有空格,所以我们需要去除空格</span></span><br><span class=\"line\">code = code.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 利用百度云图片文字识别实现自动登录脚本,可以参考2021-1-13号的笔记进行实现</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/03/01/3-01/",
            "url": "https://vf77.cn/2021/03/01/3-01/",
            "title": "Ant Design of Vue",
            "date_published": "2021-03-01T09:12:25.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<p>官方文档: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW50ZHYuY29tL2RvY3MvdnVlL2ludHJvZHVjZS1jbi8=\">https://www.antdv.com/docs/vue/introduce-cn/</span></p>\n<h4 id=\"button按钮\"><a class=\"markdownIt-Anchor\" href=\"#button按钮\">#</a> button 按钮</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-button type&#x3D;&quot;primary&quot;&gt;</span><br><span class=\"line\">\t主按钮</span><br><span class=\"line\">&lt;&#x2F;a-button&gt;</span><br><span class=\"line\">其中 type 的属性分别有: (dashed)虚线按钮,(danger)危险按钮</span><br><span class=\"line\">其中 disabled:按钮失效状态  ghost:使按钮背景透明 size:设置按钮大小 type:设置按钮类型</span><br></pre></td></tr></table></figure>\n<h4 id=\"input输入框\"><a class=\"markdownIt-Anchor\" href=\"#input输入框\">#</a> input 输入框</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-input placeholder&#x3D;&quot;请输入内容够&quot; &#x2F;&gt;</span><br><span class=\"line\">placeholder:提示词 defaultValue:输入框内的默认内容 type:输入框所属类型 disabled:禁用状态</span><br></pre></td></tr></table></figure>\n<h4 id=\"redio单选框\"><a class=\"markdownIt-Anchor\" href=\"#redio单选框\">#</a> redio 单选框</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-radio&gt;单选框&lt;&#x2F;a-radio&gt;</span><br><span class=\"line\">checked:当前是否被选中 defaultChecked:初始是否被选中</span><br></pre></td></tr></table></figure>\n<h4 id=\"checkbox多选框\"><a class=\"markdownIt-Anchor\" href=\"#checkbox多选框\">#</a> checkbox 多选框</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a-checkbox :span&#x3D;&quot;A&quot;&gt;</span><br><span class=\"line\">\t多选框</span><br><span class=\"line\">&lt;&#x2F;a-checkbox&gt;</span><br><span class=\"line\">checked:指定当前是否选中 defaultChecked:初始是否选中 disabled:不可选中状态</span><br><span class=\"line\">:span设置多个多选框为同一组</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/02/17/2-17/",
            "url": "https://vf77.cn/2021/02/17/2-17/",
            "title": "Docker",
            "date_published": "2021-02-17T08:40:15.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"docker配置源\"><a class=\"markdownIt-Anchor\" href=\"#docker配置源\">#</a> Docker 配置源</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先输入: docker-machine ssh default</span><br><span class=\"line\">再进行源的配置: sudo sed -i <span class=\"string\">&quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=https://d7grpode.mirror.aliyuncs.com |g&quot;</span> /var/lib/boot2docker/profile</span><br><span class=\"line\">配置完成之后输入: exit 退出</span><br><span class=\"line\"></span><br><span class=\"line\">然后输入: docker-machine restart default</span><br><span class=\"line\">最后输入: docker info 查看即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"docker基础命令\"><a class=\"markdownIt-Anchor\" href=\"#docker基础命令\">#</a> Docker 基础命令</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info 显示Docker系统信息,包括镜像和容器数</span><br><span class=\"line\">docker images 用于查看本地已拥有的镜像</span><br><span class=\"line\">docker pull redis(镜像名称) 拉取所需要的镜像</span><br><span class=\"line\">docker save -o <span class=\"string\">&#x27;c:/tmp/redis.tar&#x27;</span> redis 将images中所显示的镜像下载到本地文件夹中</span><br><span class=\"line\">docker load -i <span class=\"string\">&#x27;c:tmp/redis.tar&#x27;</span> 将本地的镜像下载到Docker</span><br><span class=\"line\">docker rmi -f 镜像ID 利用dockerimages中所显示的IMAGE ID删除镜像</span><br><span class=\"line\">docker ps 显示正在运行中的容器</span><br><span class=\"line\">docker ps -a 显示所有容器</span><br><span class=\"line\"></span><br><span class=\"line\">容器ID是docker -a 中的CONTAINER ID所显示的ID</span><br><span class=\"line\">docker stop 容器ID 结束正在运行中的容器</span><br><span class=\"line\">docker start 容器ID 运行容器ID所对应的容器</span><br><span class=\"line\">docker rm 容器ID 删除容器ID对应的容器</span><br><span class=\"line\"></span><br><span class=\"line\">dockerd-machine ip default 获取本机所分配的IP</span><br><span class=\"line\">docker run -p <span class=\"number\">6380</span>:<span class=\"number\">6379</span> redis 运行指定的容器(redis) <span class=\"number\">6380</span>:<span class=\"number\">6379</span>是指定IP</span><br><span class=\"line\"></span><br><span class=\"line\">win+R 输入 cmd</span><br><span class=\"line\">连接docker所启动的容器</span><br><span class=\"line\">redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.100</span> -p <span class=\"number\">3680</span></span><br><span class=\"line\">这里是运行的<span class=\"number\">6380</span> IP</span><br><span class=\"line\">默认IP为<span class=\"number\">6379</span></span><br><span class=\"line\">可以直接输入redis-cli 直接运行</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/21/1-21/",
            "url": "https://vf77.cn/2021/01/21/1-21/",
            "title": "画中画,关注状态,循环显示外表内容",
            "date_published": "2021-01-21T07:42:44.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"画中画\"><a class=\"markdownIt-Anchor\" href=\"#画中画\">#</a> 画中画</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 画中画</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"comment\"># 需要在data中定义一个 msg</span></span><br><span class=\"line\">\t&lt;van-button @click=&quot;into&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/van-button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 画中画功能</span></span><br><span class=\"line\">    into:function()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(video !== document.pictureInPictureElement)&#123;</span><br><span class=\"line\">            video.requestPictureInPicture();</span><br><span class=\"line\">            this.msg = <span class=\"string\">&quot;退出&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            document.exitPictureInPicture()</span><br><span class=\"line\">            this.msg = <span class=\"string\">&quot;进入&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关注状态\"><a class=\"markdownIt-Anchor\" href=\"#关注状态\">#</a> 关注状态</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Django中: </span></span><br><span class=\"line\"><span class=\"comment\"># 获取关注状态</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetFlow</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取课程ID</span></span><br><span class=\"line\">        <span class=\"built_in\">id</span> = request.GET.get(<span class=\"string\">&quot;id&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        token = request.GET.get(<span class=\"string\">&quot;token&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 解码</span></span><br><span class=\"line\">        decode_jwt = jwt.decode(token, <span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\">        uid = decode_jwt[<span class=\"string\">&#x27;uid&#x27;</span>]</span><br><span class=\"line\">\t\t<span class=\"comment\"># 判断是否存在</span></span><br><span class=\"line\">        flow = Flow.objects.<span class=\"built_in\">filter</span>(uid=uid, course_id=<span class=\"built_in\">id</span>).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> flow:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;state&quot;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;state&quot;</span>: <span class=\"string\">&#x27;false&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Vue中获取关注状态</span></span><br><span class=\"line\"><span class=\"comment\"># checked 在data 中设置为 false</span></span><br><span class=\"line\">关注课程: &lt;van-switch v-model=<span class=\"string\">&quot;checked&quot;</span> size=<span class=\"string\">&quot;24px&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 获取关注状态</span></span><br><span class=\"line\">    get_flow:function()&#123;</span><br><span class=\"line\">        this.axios.get(&quot;http:#localhost:8000/getflow/&quot;,&#123;params:&#123;token:this.token,id:this.cid&#125;&#125;).then(res=&gt;&#123;</span><br><span class=\"line\">            console.log(res)</span><br><span class=\"line\">            <span class=\"comment\"># 数据类型的转换</span></span><br><span class=\"line\">            let <span class=\"built_in\">bool</span> = &#123;<span class=\"string\">&#x27;true&#x27;</span>:true,<span class=\"string\">&#x27;false&#x27;</span>:false&#125;</span><br><span class=\"line\">            <span class=\"comment\"># 重新赋值给checked</span></span><br><span class=\"line\">            this.checked = <span class=\"built_in\">bool</span>[res.data.state]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 在 mounted 中调用 get_flow 方法</span></span><br><span class=\"line\">mounted:function()&#123;</span><br><span class=\"line\">    this.get_flow()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"循环的利用\"><a class=\"markdownIt-Anchor\" href=\"#循环的利用\">#</a> 循环的利用</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlowView</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        token = request.GET.get(<span class=\"string\">&quot;token&quot;</span>)</span><br><span class=\"line\">        decode_jwt = jwt.decode(token, <span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\">        uid = decode_jwt[<span class=\"string\">&#x27;uid&#x27;</span>]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(uid, <span class=\"string\">&#x27;-----uid------&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 查找出该表中符合条件的对象</span></span><br><span class=\"line\">        flow_li = Flow.objects.<span class=\"built_in\">filter</span>(uid=uid)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># print(flow_li.count(), &#x27;------flow_li-------&#x27;)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 进行序列化</span></span><br><span class=\"line\">        flow_li_ser = FlowSer(flow_li, many=<span class=\"literal\">True</span>).data</span><br><span class=\"line\">        <span class=\"comment\"># print(flow_li_ser, &#x27;------flow_li_ser---------&#x27;)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 定义一个空值,用于存放数据并返回</span></span><br><span class=\"line\">        course = []</span><br><span class=\"line\">        <span class=\"comment\"># 循环前边序列化后的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> flow_li_ser:</span><br><span class=\"line\">            p = &#123;&#125;</span><br><span class=\"line\">            <span class=\"comment\"># 查找符合规格的对象数据</span></span><br><span class=\"line\">            course_li = Course.objects.<span class=\"built_in\">filter</span>(<span class=\"built_in\">id</span>=i[<span class=\"string\">&#x27;course_id&#x27;</span>])</span><br><span class=\"line\">            <span class=\"comment\"># print(i[&#x27;course_id&#x27;], &#x27;---icourseid-----&#x27;)</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 进行序列化</span></span><br><span class=\"line\">            course_li_ser = CourseSer(course_li, many=<span class=\"literal\">True</span>).data</span><br><span class=\"line\">            <span class=\"comment\"># print(course_li_ser[0][&#x27;title&#x27;], &#x27;------course_li_ser-------&#x27;)</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 赋值给前面所定义的字典</span></span><br><span class=\"line\">            p[<span class=\"string\">&#x27;course_name&#x27;</span>] = course_li_ser[<span class=\"number\">0</span>][<span class=\"string\">&#x27;title&#x27;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># p[&#x27;course_name&#x27;] = course_li[&#x27;title&#x27;]</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 赋值</span></span><br><span class=\"line\">            course.append(p)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(course, <span class=\"string\">&#x27;----course_li------&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;flow_li&quot;</span>: flow_li_ser, <span class=\"string\">&quot;course_li&quot;</span>: course&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/20/1-20/",
            "url": "https://vf77.cn/2021/01/20/1-20/",
            "title": "视频上传,分页",
            "date_published": "2021-01-20T07:45:34.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"视频上传\"><a class=\"markdownIt-Anchor\" href=\"#视频上传\">#</a> 视频上传:</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件上传</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Uploader</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 接收文件</span></span><br><span class=\"line\">        file = request.FILES.get(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 写文件</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(UPLOAD_ROOT, <span class=\"string\">&quot;&quot;</span>, file.name), <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> file.chunks():</span><br><span class=\"line\">                f.write(chunk)</span><br><span class=\"line\">        <span class=\"comment\"># 让HttpResponse返回的数据为json数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(json.dumps(&#123;<span class=\"string\">&quot;filename&quot;</span>: file.name&#125;, ensure_ascii=<span class=\"literal\">False</span>), content_type=<span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 再在Django中配置一个路由即可(这些代码,前面的博客内也有)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;van-cell-group&gt;</span><br><span class=\"line\">    \t<span class=\"comment\"># 将文件添加到后端</span></span><br><span class=\"line\">    \t&lt;van-uploader :after-read=<span class=\"string\">&quot;afterRead&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/van-cell-group&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件上传</span></span><br><span class=\"line\">afterRead:function(file)&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 定义参数</span></span><br><span class=\"line\">    let data = new FormData()</span><br><span class=\"line\">    data.append(<span class=\"string\">&#x27;file&#x27;</span>,file.file)</span><br><span class=\"line\">    <span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">    const axiosInstance = this.axios.create(&#123;withCredentials:false&#125;);</span><br><span class=\"line\">    axiosInstance(&#123;method:&quot;POST&quot;,url:&quot;http:#localhost:8000/uploader/&quot;,data:data&#125;).then(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res)</span><br><span class=\"line\">        this.src = <span class=\"string\">&quot;http:#localhost:8000/static/upload/&quot;</span>+res.data.filename;</span><br><span class=\"line\">        this.video = res.data.filename</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\"># 上述代码全部都是提交视频,入库存储的话,存储的是视频的名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若是想要提交完录屏就立即展示: </span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;van-cell-group&gt;</span><br><span class=\"line\">        <span class=\"comment\"># controls控制视频 autoplay自动播放 muted静音</span></span><br><span class=\"line\">    \t&lt;video width=&quot;300&quot; height=&quot;240&quot; :src=&quot;src&quot; controls=&quot;controls&quot; autoplay=&quot;autoplay&quot; muted&gt;&lt;/video&gt;</span><br><span class=\"line\">    &lt;/van-cell-group&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"comment\"># 其中的src已经在上面的代码中配置过了</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"分页\"><a class=\"markdownIt-Anchor\" href=\"#分页\">#</a> 分页</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 课程列表页</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CourseList</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 当前页</span></span><br><span class=\"line\">        page = request.GET.get(<span class=\"string\">&quot;page&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 每页展示多少数据</span></span><br><span class=\"line\">        size = request.GET.get(<span class=\"string\">&#x27;size&#x27;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 开始位置(当前页减一 * 每页多少条数据)</span></span><br><span class=\"line\">        data_start = (<span class=\"built_in\">int</span>(page) - <span class=\"number\">1</span>) * <span class=\"built_in\">int</span>(size)</span><br><span class=\"line\">        <span class=\"comment\"># 结束位置(当前页 * 每页个数)</span></span><br><span class=\"line\">        data_end = <span class=\"built_in\">int</span>(page) * <span class=\"built_in\">int</span>(size)</span><br><span class=\"line\">        <span class=\"comment\"># 查询 切片包头不包尾</span></span><br><span class=\"line\">        courselist = Course.objects.<span class=\"built_in\">all</span>()[data_start:data_end]</span><br><span class=\"line\">        <span class=\"comment\"># 总条数</span></span><br><span class=\"line\">        count = Course.objects.count()</span><br><span class=\"line\">        <span class=\"comment\"># 序列化</span></span><br><span class=\"line\">        courselist_ser = CourseSer(courselist, many=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&#x27;data&#x27;</span>: courselist_ser.data, <span class=\"string\">&#x27;total&#x27;</span>: count&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分页器控件</span></span><br><span class=\"line\"><span class=\"comment\"># change每点击一下就重新调用get_data page展示第几页的数据,total总页数,size一页展示多少数据</span></span><br><span class=\"line\">&lt;van-pagination @change=<span class=\"string\">&quot;get_data&quot;</span> v-model=<span class=\"string\">&quot;page&quot;</span> :total-items=<span class=\"string\">&quot;total&quot;</span> :items-per-page=<span class=\"string\">&quot;size&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">mounted:function() &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 调用下面的那个方法</span></span><br><span class=\"line\">    this.get_data()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\"># 写在methods中</span></span><br><span class=\"line\">get_data:function()&#123;</span><br><span class=\"line\">    this.axios.get(&quot;http://127.0.0.1:8000/courselist/&quot;,&#123;params:&#123;page:this.page,size:this.size&#125;&#125;).then(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res);</span><br><span class=\"line\">        <span class=\"comment\"># 接收传递过来的数据</span></span><br><span class=\"line\">        this.data = res.data.data</span><br><span class=\"line\">        <span class=\"comment\"># 总共有多少条数据</span></span><br><span class=\"line\">        this.total = res.data.total</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/19/1-19/",
            "url": "https://vf77.cn/2021/01/19/1-19/",
            "title": "课程分类,Vue递归分类",
            "date_published": "2021-01-19T06:55:25.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"课程分类\"><a class=\"markdownIt-Anchor\" href=\"#课程分类\">#</a> 课程分类</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取课程分类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cate</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 建立查询游标</span></span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    <span class=\"comment\"># 执行sql语句</span></span><br><span class=\"line\">    cursor.execute(</span><br><span class=\"line\">        <span class=\"string\">&quot;SELECT * FROM cate&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\"># 获取结果集</span></span><br><span class=\"line\">    <span class=\"comment\"># res = cursor.fetchall()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 这里调用了以前的数据转换函数(前面的笔记记得有)</span></span><br><span class=\"line\">    res = dictfetchall(cursor)</span><br><span class=\"line\">    <span class=\"comment\"># 调用get_tree函数进行 强转</span></span><br><span class=\"line\">    res = get_tree(res)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(json.dumps(res, indent=<span class=\"number\">4</span>, ensure_ascii=<span class=\"literal\">False</span>), content_type=<span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构造课程分类层级关系(树)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">    lists = []</span><br><span class=\"line\">    tree = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 把根节点的ID作为key存在,把值作为value存在</span></span><br><span class=\"line\">        tree[item[<span class=\"string\">&#x27;id&#x27;</span>]] = item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 如果表中的自关联pid不存在,则表示它是初始ID(根)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i[<span class=\"string\">&#x27;pid&#x27;</span>]:</span><br><span class=\"line\">            lists.append(tree[i[<span class=\"string\">&#x27;id&#x27;</span>]])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parent_id = i[<span class=\"string\">&#x27;pid&#x27;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 如果子级不存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;children&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> tree[parent_id]:</span><br><span class=\"line\">                tree[parent_id][<span class=\"string\">&#x27;children&#x27;</span>] = []</span><br><span class=\"line\">            tree[parent_id][<span class=\"string\">&#x27;children&#x27;</span>].append(tree[i[<span class=\"string\">&#x27;id&#x27;</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>\n<h4 id=\"vue递归分类\"><a class=\"markdownIt-Anchor\" href=\"#vue递归分类\">#</a> Vue 递归分类</h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里运用了父子组件中的 父组件向子组件传参</span></span><br><span class=\"line\"><span class=\"comment\"># 子组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;data.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        \t<span class=\"comment\"># 当子级存在并且子级的长度大于零时</span></span><br><span class=\"line\">            &lt;ul v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;data.children &amp;&amp; data.children.length &gt; 0&quot;</span>&gt;</span><br><span class=\"line\">            \t<span class=\"comment\"># 循环 自己循环自己</span></span><br><span class=\"line\">                &lt;mycate v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;child in data.children&quot;</span> :key=<span class=\"string\">&quot;child.id&quot;</span> :data=<span class=\"string\">&#x27;child&#x27;</span> /&gt;</span><br><span class=\"line\">            &lt;/ul&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name:<span class=\"string\">&quot;mycate&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 接收父组件传来的数据</span></span><br><span class=\"line\">    props:[<span class=\"string\">&#x27;data&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">ul&#123;</span><br><span class=\"line\">    padding-left: 20px;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-style: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 父组件</span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">    \t<span class=\"comment\"># 给子组件传值</span></span><br><span class=\"line\">        &lt;mycate :data=<span class=\"string\">&quot;data&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mycate <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mycate.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            data:&#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">        mycate</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\"># mounted:模板渲染之前</span></span><br><span class=\"line\">    <span class=\"comment\"># created:组件声明周期初始化之前</span></span><br><span class=\"line\">    mounted:function() &#123;</span><br><span class=\"line\">        this.get_data();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        get_data:function()&#123;</span><br><span class=\"line\">            this.axios.get(&quot;http://127.0.0.1:8000/get_cate/&quot;).then(res=&gt;&#123;</span><br><span class=\"line\">                console.log(res);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">                <span class=\"comment\"># 拼接成一个dict</span></span><br><span class=\"line\">                var mytree = &#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"number\">0</span>,name:<span class=\"string\">&quot;&quot;</span>&#125;;</span><br><span class=\"line\">                <span class=\"comment\"># 把data赋给一个子级</span></span><br><span class=\"line\">                mytree[<span class=\"string\">&#x27;children&#x27;</span>] = res.data;</span><br><span class=\"line\">                </span><br><span class=\"line\">                this.data = mytree</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/18/1-18/",
            "url": "https://vf77.cn/2021/01/18/1-18/",
            "title": "运算基础,装饰器权限",
            "date_published": "2021-01-18T06:58:03.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"运算基础\"><a class=\"markdownIt-Anchor\" href=\"#运算基础\">#</a> 运算基础</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算机中的格式为二进制,以(零)0b开头的为二进制的变量: </span><br><span class=\"line\">满二进一: <span class=\"number\">0b01</span>:<span class=\"number\">1</span>   <span class=\"number\">0b10</span>:<span class=\"number\">2</span>   <span class=\"number\">0b11</span>:<span class=\"number\">3</span>   <span class=\"number\">0b100</span>:<span class=\"number\">4</span>   <span class=\"number\">0b101</span>:<span class=\"number\">5</span>   <span class=\"number\">0b110</span>:<span class=\"number\">6</span>   <span class=\"number\">0b111</span>:<span class=\"number\">7</span>   <span class=\"number\">0b1000</span>:<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">位语运算(判断偶):要判断的数据 &amp; <span class=\"number\">1</span> 如果返回值为<span class=\"number\">0</span>则为偶数,反之则为奇数 </span><br><span class=\"line\">位于运算(位移操作 右小,左大):<span class=\"number\">0b10</span>&gt;&gt;<span class=\"number\">1</span> :<span class=\"number\">1</span>   <span class=\"number\">0b10</span>&lt;&lt;<span class=\"number\">1</span> :<span class=\"number\">4</span></span><br><span class=\"line\">折半查找: <span class=\"number\">100</span>&gt;&gt;<span class=\"number\">1</span> :<span class=\"number\">50</span>   <span class=\"number\">100</span>&lt;&lt;<span class=\"number\">1</span> :<span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">十进制转换二进制: <span class=\"built_in\">bin</span>(十进制数据)</span><br><span class=\"line\">简单思想:开始数据%<span class=\"number\">2</span>得到余数 开始数据//<span class=\"number\">2</span>得到整数 再拿得到的整数%<span class=\"number\">2</span>得到余数 按照这个顺序除到无法再除,再进行倒序排列即可: <span class=\"number\">13</span> 得到<span class=\"number\">1011</span> 二进制<span class=\"number\">0b1101</span></span><br><span class=\"line\"></span><br><span class=\"line\">手写代码:</span><br><span class=\"line\">    <span class=\"comment\"># 实现栈 (先进后出,比如水壶中的水,或者弹夹中的子弹)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            self.items=[]</span><br><span class=\"line\">        <span class=\"comment\"># 判断是否为空</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.items == []</span><br><span class=\"line\">        <span class=\"comment\"># 入栈</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.items.append(item)</span><br><span class=\"line\">        <span class=\"comment\"># 出栈</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.items.pop()</span><br><span class=\"line\">        \t<span class=\"comment\"># return self.items.pop(0)</span></span><br><span class=\"line\">\t<span class=\"comment\"># 十进制转换二进制</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transform</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">        stack = Stack()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> num != <span class=\"number\">0</span>:</span><br><span class=\"line\">            res = num % <span class=\"number\">2</span></span><br><span class=\"line\">            num = <span class=\"built_in\">int</span>(num / <span class=\"number\">2</span>)</span><br><span class=\"line\">            stack.push(res)</span><br><span class=\"line\">        s = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> stack.is_empty():</span><br><span class=\"line\">            s += <span class=\"built_in\">str</span>(stack.pop())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(transform(<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入数字: &quot;</span>))))</span><br><span class=\"line\"><span class=\"comment\"># 十进制转换二进制</span></span><br><span class=\"line\"><span class=\"comment\"># n = int(input(&quot;请输入数字: &quot;))</span></span><br><span class=\"line\"><span class=\"comment\"># # x = 2  # 转换为二进制，所以这里取x=2</span></span><br><span class=\"line\"><span class=\"comment\"># b = []  # 存储余数</span></span><br><span class=\"line\"><span class=\"comment\"># while True:  # 一直循环，商为0时利用break退出循环</span></span><br><span class=\"line\"><span class=\"comment\">#     s = n // 2  # 整数</span></span><br><span class=\"line\"><span class=\"comment\">#     y = n % 2  # 余数</span></span><br><span class=\"line\"><span class=\"comment\">#     b = b + [y]  # 每一个余数存储到b中</span></span><br><span class=\"line\"><span class=\"comment\">#     if s == 0:</span></span><br><span class=\"line\"><span class=\"comment\">#         break  # 余数为0时结束循环</span></span><br><span class=\"line\"><span class=\"comment\">#     n = s</span></span><br><span class=\"line\"><span class=\"comment\"># b.reverse()  # 使b中的元素反向排列</span></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;该数字转换为二进制后是：&#x27;, b)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"装饰器权限\"><a class=\"markdownIt-Anchor\" href=\"#装饰器权限\">#</a> 装饰器权限</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user = <span class=\"number\">0b111</span><span class=\"comment\">#若是想要没有让其拥有权限可以改为 0b110</span></span><br><span class=\"line\">permission = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_decorator</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 若是想要在Django中使用装饰器,需要将wrapper(request, *args, **kwargs)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">        <span class=\"comment\"># 利用位语运算来判断是否有上传头像的资格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> user &amp; args[<span class=\"number\">0</span>]:</span><br><span class=\"line\">    <span class=\"comment\"># Django: return func(request, *args, **kwargs)</span></span><br><span class=\"line\">            func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Django: return HttpResponse(&quot;您没有权限&quot;)</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您没有权限&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传头像</span></span><br><span class=\"line\"><span class=\"meta\">@my_decorator</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_img</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;上传头像过程(自己写)&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">prinf(upload_img(permission))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Djnago中使用</span></span><br><span class=\"line\"><span class=\"comment\"># @my_decorator</span></span><br><span class=\"line\"><span class=\"comment\"># def upload_img(request):</span></span><br><span class=\"line\"><span class=\"comment\">#     return HttpResponse(&quot;上传成功&quot;)</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/16/1-16/",
            "url": "https://vf77.cn/2021/01/16/1-16/",
            "title": "权限模型,权限操作,工厂模式",
            "date_published": "2021-01-16T08:25:45.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"权限模式\"><a class=\"markdownIt-Anchor\" href=\"#权限模式\">#</a> 权限模式</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">权限模型分为三类: ACL权限模型,RBAC,ABAC</span><br><span class=\"line\">ACL权限模型: 基于用户的权限认证体系 三表(用户,关系,节点) 关系表关联着用户表,节点表</span><br><span class=\"line\">RBAC: 基于ACL权限模型上多了一张表 四表(用户,关系,节点,角色) 用户关联角色,关系表关联角色表,节点表</span><br><span class=\"line\">\t好处:不用针对每个用户进行授权,只需要针对用户进行授权</span><br><span class=\"line\">ABAC: 基于属性(细节化)的权限认证体系</span><br></pre></td></tr></table></figure>\n<h4 id=\"权限操作\"><a class=\"markdownIt-Anchor\" href=\"#权限操作\">#</a> 权限操作</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入SQL语句相关包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> connection</span><br><span class=\"line\"><span class=\"comment\"># 转换数据类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dictfetchall</span>(<span class=\"params\">cursor</span>):</span></span><br><span class=\"line\">    desc = cursor.description</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        <span class=\"built_in\">dict</span>(<span class=\"built_in\">zip</span>([col[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> desc], row))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cursor.fetchall()</span><br><span class=\"line\">    ]</span><br><span class=\"line\"><span class=\"comment\"># 获取某个用户的权限</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetUserAccess</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 获取前端传来的Token</span></span><br><span class=\"line\">        token = request.GET.get(<span class=\"string\">&quot;token&quot;</span>)</span><br><span class=\"line\">        uid = request.GET.get(<span class=\"string\">&quot;uid&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 解码</span></span><br><span class=\"line\">        decode_jwt = jwt.decode(token, <span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 获取要查询的用户ID</span></span><br><span class=\"line\">        uuid = decode_jwt[<span class=\"string\">&#x27;uid&#x27;</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 建立查询游标</span></span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\">        <span class=\"comment\"># 执行sql语句</span></span><br><span class=\"line\">        cursor.execute(</span><br><span class=\"line\">            <span class=\"string\">&quot;SELECT a.username,c.node_name,c.id FROM USER a LEFT JOIN access b ON a.id=b.user_id LEFT JOIN node c ON b.`node_id` = c.`id` WHERE a.`id` = %s&quot;</span> % uuid)</span><br><span class=\"line\">        <span class=\"comment\"># 获取结果集</span></span><br><span class=\"line\">        <span class=\"comment\"># res = cursor.fetchall()</span></span><br><span class=\"line\">        <span class=\"comment\"># 调用上面的转换方法(转为字典类型)</span></span><br><span class=\"line\">        res = dictfetchall(cursor)</span><br><span class=\"line\">        <span class=\"comment\"># 手写序列化</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(json.dumps(res, indent=<span class=\"number\">4</span>, ensure_ascii=<span class=\"literal\">False</span>), content_type=<span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\">#</a> 工厂模式</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dingding</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;钉钉登录类&quot;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gitee</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;码云登录类&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dingding = Dingding()</span></span><br><span class=\"line\"><span class=\"comment\"># print(dingding)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工厂类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginFactory</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">product</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;dingding&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Dingding()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> name == <span class=\"string\">&quot;gitee&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Gitee()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(LoginFactory.product(<span class=\"string\">&quot;gitee&quot;</span>))</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/15/1-15/",
            "url": "https://vf77.cn/2021/01/15/1-15/",
            "title": "路由守卫,上传接口,头像组件",
            "date_published": "2021-01-15T10:58:44.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"路由守卫\"><a class=\"markdownIt-Anchor\" href=\"#路由守卫\">#</a> 路由守卫</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">路由守卫分为两种: 局部,全局,下面所写的是局部的路由守卫</span><br><span class=\"line\">当你想要判断某个页面是否登录才能进入的时候,会需要用到路由守卫(拦截器)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">\tname:<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">\tcomponent: ,</span><br><span class=\"line\">\t<span class=\"comment\"># 路由守卫(拦截器)</span></span><br><span class=\"line\">    beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class=\"line\">        const token = localStorage.getItem(<span class=\"string\">&quot;token&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!token)&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;请先登录&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 使用next进行该代码</span></span><br><span class=\"line\">            <span class=\"built_in\">next</span>(<span class=\"string\">&quot;/mylogin?back=&quot;</span>+to.path)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"># 执行</span></span><br><span class=\"line\">        <span class=\"built_in\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"上传接口\"><a class=\"markdownIt-Anchor\" href=\"#上传接口\">#</a> 上传接口</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文件上传 通用的(可以传视频,也可以传音频等)</span></span><br><span class=\"line\"><span class=\"comment\"># View与APIview区别: APIView使用Response返回数据会自动把原生的数据类型转换为json格式,而View则使用\tHttpResponse返回数据,并且需要转换后才可以使用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Uploader</span>(<span class=\"params\">View</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用post请求传递的参数没有长度限制</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 接收文件</span></span><br><span class=\"line\">        file = request.FILES.get(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 写文件 把文件的实体 写到我们的服务器上</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(UPLOAD_ROOT, <span class=\"string\">&quot;&quot;</span>, file.name), <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> file.chunks():</span><br><span class=\"line\">                f.write(chunk)</span><br><span class=\"line\">        <span class=\"comment\"># 让HttpResponse返回的数据为json数据 如果文件名是中文的需要停止ensure转码ensure_ascii=False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(json.dumps(&#123;<span class=\"string\">&quot;filename&quot;</span>: file.name&#125;, ensure_ascii=<span class=\"literal\">False</span>),content_type=<span class=\"string\">&quot;application/json&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义测试文件\"><a class=\"markdownIt-Anchor\" href=\"#自定义测试文件\">#</a> 自定义测试文件</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests  </span><br><span class=\"line\">files = &#123;<span class=\"string\">&quot;file&quot;</span>: (<span class=\"string\">&quot;文件名&quot;</span>, <span class=\"built_in\">open</span>(<span class=\"string\">&quot;所在地址加文件名&quot;</span>, <span class=\"string\">&#x27;rb&#x27;</span>))&#125;</span><br><span class=\"line\"><span class=\"comment\"># 要测试的接口</span></span><br><span class=\"line\">res = requests.post(<span class=\"string\">&quot;http://localhost:8000/uploader/&quot;</span>, files=files)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"头像组件\"><a class=\"markdownIt-Anchor\" href=\"#头像组件\">#</a> 头像组件</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;van-uploader :after-read=<span class=\"string\">&quot;所绑定的方法&quot;</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\"># 点击事件</span></span><br><span class=\"line\"><span class=\"comment\"># 文件上传</span></span><br><span class=\"line\">afterRead:function(file)&#123;</span><br><span class=\"line\">    <span class=\"comment\"># 定义参数</span></span><br><span class=\"line\">    let data = new FormData()</span><br><span class=\"line\">    data.append(<span class=\"string\">&#x27;file&#x27;</span>,file.file)</span><br><span class=\"line\">    <span class=\"comment\"># 创建实例</span></span><br><span class=\"line\">    const axiosInstance = this.axios.create(&#123;withCredentials:false&#125;);</span><br><span class=\"line\">    axiosInstance(&#123;method:&quot;PUT&quot;,url:&quot;http://localhost:8000/putimg/?token=&quot;+this.token,data:data&#125;).then(res=&gt;&#123;</span><br><span class=\"line\">        console.log(res.data)</span><br><span class=\"line\">        this.$router.go(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 前端若是想要接受data中的file可以直接使用:</span></span><br><span class=\"line\">file = request.FILES.get(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 圆的显示头像</span></span><br><span class=\"line\">&lt;van-image <span class=\"built_in\">round</span> width=<span class=\"string\">&quot;7rem&quot;</span> height=<span class=\"string\">&quot;7rem&quot;</span> :src=<span class=\"string\">&quot;&#x27;http://127.0.0.1:8000/&#x27;+user.img&quot;</span> /&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/14/1-14/",
            "url": "https://vf77.cn/2021/01/14/1-14/",
            "title": "JWT,Vue状态保持",
            "date_published": "2021-01-14T02:26:25.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"jwt基础\"><a class=\"markdownIt-Anchor\" href=\"#jwt基础\">#</a> JWT 基础</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 想要使用JWT 首先需要导包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jwt</span><br><span class=\"line\"><span class=\"comment\"># 进行编码 进行编码的数据只能是字典类型 &#123;&quot;键&quot;:值&#125; 参数依次为:编码的数据,密钥,算法</span></span><br><span class=\"line\">encode_jwt = jwt.encode(要编码的信息,<span class=\"string\">&quot;密钥(123 可以自定义)&quot;</span>,algorithm=<span class=\"string\">&quot;HS256&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行强转 若是PyJWT版本过高,则会自动帮你完成强转 目前所使用的版本1.7.1</span></span><br><span class=\"line\">encode_str = <span class=\"built_in\">str</span>(encode_jwt,<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行解密 参数依次为: 要解密的信心,以及之前进行编码的密钥</span></span><br><span class=\"line\">decode_jwt = jwt.decode(encode_str,<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"状态保持\"><a class=\"markdownIt-Anchor\" href=\"#状态保持\">#</a> 状态保持</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue中像浏览器存储数据的方法有三种: localStorage, sessionStorage, cookie</span><br><span class=\"line\">其中sessionStorage和localStorage都是在浏览器端用来存储数据的对象，它们也只在浏览器里有作用不会被发送到服务器端。</span><br><span class=\"line\">经常使用的是 localStorage,sessionStorage(目前只会这两个)</span><br><span class=\"line\"></span><br><span class=\"line\">sessionStorage,localStorage: </span><br><span class=\"line\">当你关闭浏览器之后sessionStorage所保持的数据会被销毁</span><br><span class=\"line\">localStorage所保持的数据不会消亡，只要创建了并且我们没有手动销毁（或者清除浏览器历史）就会一直存在于我们的浏览器中</span><br><span class=\"line\"></span><br><span class=\"line\">代码操作: </span><br><span class=\"line\">.setItem(<span class=\"string\">&quot;键名&quot;</span>,值) 这是用来保持数据的</span><br><span class=\"line\">.getItem(<span class=\"string\">&quot;键名&quot;</span>) 这个是用来获取我们之前所保持的数据</span><br><span class=\"line\">.removeItem(<span class=\"string\">&quot;键名&quot;</span>) 清除该数据名的数据 也就是删除了这对数据</span><br><span class=\"line\">上述的这些方法使用localStorage 也可以使用</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/13/1-13/",
            "url": "https://vf77.cn/2021/01/13/1-13/",
            "title": "自动测试脚本,图片验证码",
            "date_published": "2021-01-13T02:11:03.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"自动测试脚本\"><a class=\"markdownIt-Anchor\" href=\"#自动测试脚本\">#</a> 自动测试脚本</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导包: <span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成浏览器对象(对象),这里选择的是谷歌浏览器</span></span><br><span class=\"line\">browser = webdriver.Chrome(<span class=\"string\">&quot;绝对路径&quot;</span>)  需要把 \\ 换为 /  若是不想换则可以写为 \\\\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置要测试的前端页面</span></span><br><span class=\"line\">browser.get(<span class=\"string\">&quot;路由&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置需要测试的数据 这里需要指定测试数据所处的 标签(可以利用元素选择器来帮助我们来快速选中) [1]代表着下标</span></span><br><span class=\"line\">browser.find_elements_by_tag_name(<span class=\"string\">&quot;标签&quot;</span>)[<span class=\"number\">1</span>].send_keys(<span class=\"string\">&quot;测试数据&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若是想要自动测试滑动模块首先导包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"comment\"># 拖拽动作</span></span><br><span class=\"line\">action = ActionChains(browser)</span><br><span class=\"line\"><span class=\"comment\"># 获取要拖拽对象的 标签(也就是滑动模块的那个小圆圈)</span></span><br><span class=\"line\">button = browser.find_element_by_class_name(<span class=\"string\">&quot;唯一标识&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置鼠标按住不松,拖动 .perform代表着确认(只要涉及到了动作,都需要进行确认)</span></span><br><span class=\"line\">action.click_and_hold(button).perform()</span><br><span class=\"line\"><span class=\"comment\"># 开始执行动作</span></span><br><span class=\"line\">action.reset_actions()</span><br><span class=\"line\"><span class=\"comment\"># move代表着移动左边是X轴坐标,右边是Y轴坐标,其中X轴是代表着横向(左右),Y轴代表着纵向(上下)</span></span><br><span class=\"line\">action.move_by_offset(x, y).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 图片验证码 StrictRedis作用详情见: 图片验证码</span></span><br><span class=\"line\">res = StrictRedis()</span><br><span class=\"line\"><span class=\"comment\"># 这里是将图片验证码所生成的数字提前保存到了redis中,所以可以直接.get获取并进行转码</span></span><br><span class=\"line\">img_code = res.get(<span class=\"string\">&quot;code&quot;</span>).decode()</span><br><span class=\"line\">browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">3</span>].send_keys(img_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置自动点击按钮 .click()</span></span><br><span class=\"line\">browser.find_element_by_class_name(<span class=\"string\">&quot;按钮的唯一标识(不要重复)&quot;</span>).click()</span><br><span class=\"line\"><span class=\"comment\"># 关闭浏览器</span></span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"图片验证码\"><a class=\"markdownIt-Anchor\" href=\"#图片验证码\">#</a> 图片验证码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先定义验证码类</span></span><br><span class=\"line\">cladd MyCode(View):</span><br><span class=\"line\">\t<span class=\"comment\"># 内置类方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_random_color</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 随机生成三个颜色</span></span><br><span class=\"line\">\t\tR = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">\t\tG = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">\t\tB = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (R,G,B)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self,request</span>):</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 自定义画布,第一个参数为宽,第二个参数为高</span></span><br><span class=\"line\">\t\timg_size = (<span class=\"number\">120</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义图像对象,参数依次为 文字颜色,画布,画布颜色</span></span><br><span class=\"line\">\t\timage = Image.new(<span class=\"string\">&quot;RGB&quot;</span>, img_size, <span class=\"string\">&quot;white&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义画笔</span></span><br><span class=\"line\">\t\tdraw = ImageDraw.Draw(image, <span class=\"string\">&quot;RGB&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 自定义字符串</span></span><br><span class=\"line\">\t\tsource = <span class=\"string\">&quot;0123456789qweasdzxcrtyfghvbn&quot;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义容器</span></span><br><span class=\"line\">\t\tcode_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\"># 循环四次</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 获取字符颜色</span></span><br><span class=\"line\">\t\t\ttext_color = self.get_random_color()</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 获取随机字符下标</span></span><br><span class=\"line\">\t\t\ttmp_num = random.randrange(<span class=\"built_in\">len</span>(source))</span><br><span class=\"line\">\t\t\trandom_str = source[tmp_num]</span><br><span class=\"line\">\t\t\tcode_str += random_str</span><br><span class=\"line\">\t\t\tdraw.text((<span class=\"number\">20</span> + <span class=\"number\">30</span> * i, <span class=\"number\">30</span>), random_str, text_color)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tbuf = io.BytesIO()</span><br><span class=\"line\">        <span class=\"comment\"># 保存在内存中,并转换为png格式</span></span><br><span class=\"line\">\t\timage.save(buf,<span class=\"string\">&quot;png&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"comment\"># 保存验证码在session中 request.session你可以将它看成一个全局变量</span></span><br><span class=\"line\">        \t<span class=\"comment\"># 获取值: request.session.get(&quot;键名&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\trequest.session[<span class=\"string\">&#x27;code&#x27;</span>] = code_str</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        # 方法一: </span></span><br><span class=\"line\"><span class=\"string\">        # 有些电脑可能无法使用 request.session那么可以使用StrictRedis来代替</span></span><br><span class=\"line\"><span class=\"string\">        # 首先导包: </span></span><br><span class=\"line\"><span class=\"string\">        from redis import StrictRedis</span></span><br><span class=\"line\"><span class=\"string\">        # 打开StrictRedis</span></span><br><span class=\"line\"><span class=\"string\">        res = StrictRedis()</span></span><br><span class=\"line\"><span class=\"string\">        # 保存</span></span><br><span class=\"line\"><span class=\"string\">        res.set(&quot;code&quot;, code_str)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        # 若是想要在别的地方获取数据: </span></span><br><span class=\"line\"><span class=\"string\">        # 首先打开StrictRedis</span></span><br><span class=\"line\"><span class=\"string\">        res = StrictRedis()</span></span><br><span class=\"line\"><span class=\"string\">        # 然后获取到code 再进行解密</span></span><br><span class=\"line\"><span class=\"string\">        img_code = res.get(&quot;code&quot;).decode()</span></span><br><span class=\"line\"><span class=\"string\">        # 这样就可以在别的地方拿到code的值了</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        # 方法二</span></span><br><span class=\"line\"><span class=\"string\">        # 赋值</span></span><br><span class=\"line\"><span class=\"string\">        r = redis.Redis()</span></span><br><span class=\"line\"><span class=\"string\">        code = r.set(&quot;code&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        # 取值</span></span><br><span class=\"line\"><span class=\"string\">        r = redis.Redis()</span></span><br><span class=\"line\"><span class=\"string\">        code = r.get(&quot;code&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> HttpResponse(buf.getvalue(),<span class=\"string\">&quot;image/png&quot;</span>)\t\t</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将该图片显示在Vue 中</span></span><br><span class=\"line\">&lt;van-cell-group&gt;</span><br><span class=\"line\">    &lt;img :src=<span class=\"string\">&quot;src&quot;</span> @click=<span class=\"string\">&quot;changecode&quot;</span> /&gt;</span><br><span class=\"line\">    <span class=\"comment\"># src为上述MyCode视图的路由   点击事件是确保点击一下换一下图片</span></span><br><span class=\"line\">&lt;/van-cell-group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;van-field v-model=<span class=\"string\">&quot;code&quot;</span> label=<span class=\"string\">&quot;验证码&quot;</span> placeholder=<span class=\"string\">&quot;请输入验证码&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击事件内写上: </span></span><br><span class=\"line\"><span class=\"comment\"># 这样写的原因是url只要传随机参数,url立刻就会被刷新</span></span><br><span class=\"line\">changecode:function()&#123;</span><br><span class=\"line\">\t<span class=\"comment\"># 随机数</span></span><br><span class=\"line\">\tvar num = Math.ceil(Math.random()*<span class=\"number\">10</span>);</span><br><span class=\"line\">\tthis.src = this.src + <span class=\"string\">&quot;?num=&quot;</span>+num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">若是想要让样式更好看一点: </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    img&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 改变鼠标样式 pointer(可点击样式)</span></span><br><span class=\"line\">        cursor:pointer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/12/1-12/",
            "url": "https://vf77.cn/2021/01/12/1-12/",
            "title": "多方式登录,自定义方法,滑动模块",
            "date_published": "2021-01-12T03:47:06.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"多方式登录\"><a class=\"markdownIt-Anchor\" href=\"#多方式登录\">#</a> 多方式登录</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多方式登录指的是使用 手机号,邮箱,账户,用户名,等登录方式</span><br><span class=\"line\">书写多方式登录有多种方式:</span><br><span class=\"line\">第一种: </span><br><span class=\"line\">\t只向后端传递两个值:username,password</span><br><span class=\"line\">\t利用Q函数来进行判断,假设密码加密过:</span><br><span class=\"line\">书写方式如下:</span><br><span class=\"line\"><span class=\"comment\"># 先判断这个账号是否存在</span></span><br><span class=\"line\">user=User.<span class=\"built_in\">object</span>.<span class=\"built_in\">filter</span>(Q(username=username)|Q(phone=username)|Q(email=username)).first()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> user:</span><br><span class=\"line\">\t\t<span class=\"comment\"># 将密码进行解密,并比较</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check_password(password,user_li.password):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;成功&quot;</span>&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;失败&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;失败&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">第二种方式:</span><br><span class=\"line\">前端使用</span><br><span class=\"line\">&lt;van-tabs v-model=<span class=\"string\">&quot;active&quot;</span>&gt;</span><br><span class=\"line\">\t&lt;van-tab title=<span class=\"string\">&quot;用户名登录&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;van-field v-model=<span class=\"string\">&quot;username&quot;</span> label=<span class=\"string\">&quot;账号&quot;</span> placeholder=<span class=\"string\">&quot;请输入登录账号&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/van-tab&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;van-tab title=<span class=\"string\">&quot;手机名登录&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;van-field v-model=<span class=\"string\">&quot;phone&quot;</span> label=<span class=\"string\">&quot;手机号&quot;</span> placeholder=<span class=\"string\">&quot;请输入登录手机号&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/van-tab&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;van-tab title=<span class=\"string\">&quot;邮箱登录&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;van-field v-model=<span class=\"string\">&quot;email&quot;</span> label=<span class=\"string\">&quot;邮箱&quot;</span> placeholder=<span class=\"string\">&quot;请输入登录邮箱&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/van-tab&gt;</span><br><span class=\"line\">&lt;/van-tabs&gt;</span><br><span class=\"line\">方法: </span><br><span class=\"line\">向后端传递 username,phone,email,active的值</span><br><span class=\"line\">其中active的值默认为<span class=\"number\">0</span>: 也就是用户名登录</span><br><span class=\"line\">在后端,我们可以通过来判断actice的值来得到他使用的是什么登录方式</span><br><span class=\"line\"></span><br><span class=\"line\">后端代码如下: </span><br><span class=\"line\">        <span class=\"keyword\">if</span> active == <span class=\"number\">2</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(email=email).first()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> active == <span class=\"number\">1</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(phone=phone).first()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(username=username).first()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(user, <span class=\"string\">&#x27;------------&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> check_password(password, user.password):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;成功&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;账号或者密码错误&quot;</span>, <span class=\"string\">&#x27;code&#x27;</span>: <span class=\"number\">405</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;您的用户名或者密码错误&quot;</span>, <span class=\"string\">&#x27;code&#x27;</span>: <span class=\"number\">405</span>&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义测试接口\"><a class=\"markdownIt-Anchor\" href=\"#自定义测试接口\">#</a> 自定义测试接口</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST测试接口(自定义):</span><br><span class=\"line\">首先导包: <span class=\"keyword\">import</span> requests</span><br><span class=\"line\">赋值: data = &#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;7777777&quot;</span>&#125;</span><br><span class=\"line\">传值给相应接口: res = requests.post(<span class=\"string\">&quot;http://localhost:8000/register/&quot;</span>,data=data)</span><br><span class=\"line\"></span><br><span class=\"line\">GET测试接口(自定义):</span><br><span class=\"line\">GET测试接口与post测试接口没有什么区别,</span><br><span class=\"line\">唯一的区别就在于 传值</span><br><span class=\"line\">GET传值: res = requests.get(<span class=\"string\">&quot;http://localhost:8000/register/&quot;</span>,params=data)</span><br><span class=\"line\"></span><br><span class=\"line\">打印出返回的值,从而判断是否成功: <span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义加密\"><a class=\"markdownIt-Anchor\" href=\"#自定义加密\">#</a> 自定义加密</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自定义加密分为多种类型 下面要写的是 md5加密(单向加密,不可逆)</span><br><span class=\"line\">首先导包: <span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_password</span>(<span class=\"params\">mypass</span>):</span></span><br><span class=\"line\">\t<span class=\"comment\"># mypass的作用的接收传递过来的数据</span></span><br><span class=\"line\">\t<span class=\"comment\"># 生成对象 使用哈希md5加密方式</span></span><br><span class=\"line\">\tmd5 = hashlib.md5()</span><br><span class=\"line\">\t<span class=\"comment\"># 定义要加密的对象</span></span><br><span class=\"line\">\tsign_str = mypass</span><br><span class=\"line\">\t<span class=\"comment\"># 进行转码</span></span><br><span class=\"line\">\tsign_utf8 = <span class=\"built_in\">str</span>(sign_str).encode(encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># 进行加密</span></span><br><span class=\"line\">\tmd5.update(sign_utf8)</span><br><span class=\"line\">\t<span class=\"comment\"># 生成密文</span></span><br><span class=\"line\">\tmd5_server = md5.hexdigest()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 返回密文</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> md5_server</span><br></pre></td></tr></table></figure>\n<h5 id=\"滑动模块\"><a class=\"markdownIt-Anchor\" href=\"#滑动模块\">#</a> 滑动模块</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Vue中若是想要使用第三方模板,首先需要导包 导包分为局部,全局</span><br><span class=\"line\">若是该包在整个项目中频繁使用则可以使用全局导包,反之则没有必要,否则会拖慢运行的速度</span><br><span class=\"line\"><span class=\"keyword\">import</span> dragVerify <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-drag-verify&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">声明组件后就可以使用了</span><br><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;dragVerify&quot;</span>:dragVerify</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">在div中写上:</span><br><span class=\"line\">&lt;van-cell-group&gt;</span><br><span class=\"line\">\t&lt;drag-verify :width=&quot;width&quot; :height=&quot;height&quot; :text=&quot;text&quot; ref=&quot;Verify&quot;&gt;&lt;/drag-verify&gt;</span><br><span class=\"line\">&lt;/van-cell-group&gt;</span><br><span class=\"line\">其中的width是宽度,height是高度,text是现实在滑块中的提示文字; 这些值都需要到</span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">\t\twidth:<span class=\"number\">320</span>,</span><br><span class=\"line\">\t\theight:<span class=\"number\">42</span>,</span><br><span class=\"line\">\t\ttext:<span class=\"string\">&quot;请您拨动滑块&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">中定义</span><br><span class=\"line\"></span><br><span class=\"line\">若是想要判断滑块是否到达底部</span><br><span class=\"line\">可以使用: this.$refs.Verify.isPassing 语句</span><br><span class=\"line\">该语句 若是滑块到达底部则会返回true,反之则会返回false</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/01/11/1-11/",
            "url": "https://vf77.cn/2021/01/11/1-11/",
            "title": "Django,Vue父子组件",
            "date_published": "2021-01-11T03:17:54.000Z",
            "content_html": "<!--  -->\n<span id=\"more\"></span>\n<h4 id=\"django基础\"><a class=\"markdownIt-Anchor\" href=\"#django基础\">#</a> Django 基础:</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Django删除模板: pip uninstall 模板名</span><br><span class=\"line\">Django下载模板: pip install 模板名</span><br><span class=\"line\">Djnago下载多个模板: pip install -r 文件名.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Django查询表内数据: 若是不确定一定存在,则建议使用.filter().first()</span><br><span class=\"line\">\t若是一定存在,则可以使用.get()</span><br></pre></td></tr></table></figure>\n<h6 id=\"命令行\"><a class=\"markdownIt-Anchor\" href=\"#命令行\">#</a> 命令行</h6>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">若是在命令行内运行Djnago项目,所使用的是Python真实环境,而不是虚拟环境</span><br></pre></td></tr></table></figure>\n<h4 id=\"父子组件\"><a class=\"markdownIt-Anchor\" href=\"#父子组件\">#</a> 父子组件:</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导包 子组件:</span><br><span class=\"line\">import 子组件名称 from &quot;子组件路由&quot;</span><br><span class=\"line\">在export default内写上:</span><br><span class=\"line\">\tcomponents:&#123;</span><br><span class=\"line\">\t\t&quot;子组件名&quot;:子组件名称</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">最后在div中使用标签样式进行调用即可: &lt;子组件名&gt;&lt;&#x2F;子组件名&gt;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        }
    ]
}