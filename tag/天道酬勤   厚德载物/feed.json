{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hello stranger • All posts by \"天道酬勤   厚德载物\" tag",
    "description": "",
    "home_page_url": "https://vf77.cn",
    "items": [
        {
            "id": "https://vf77.cn/2021/05/06/0b12/",
            "url": "https://vf77.cn/2021/05/06/0b12/",
            "title": "七牛云上传",
            "date_published": "2021-05-06T00:52:54.902Z",
            "content_html": "<h4 id=\"七牛云\"><a class=\"markdownIt-Anchor\" href=\"#七牛云\">#</a> 七牛云</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先需要下载 pip install qiniu</span></span><br><span class=\"line\"><span class=\"comment\"># 进行导包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> qiniu <span class=\"keyword\">import</span> Auth</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这一步是获取到七牛云Token</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiu</span>(<span class=\"params\">APIView</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self, request</span>):</span></span><br><span class=\"line\">        q = Auth(<span class=\"string\">&#x27;用户密钥管理中的AK&#x27;</span>, <span class=\"string\">&#x27;用户密钥管理中的SK&#x27;</span>)</span><br><span class=\"line\">        token = q.upload_token(<span class=\"string\">&#x27;你所创建的应用名称&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(token)</span><br><span class=\"line\">        res = &#123;&#125;</span><br><span class=\"line\">        res[<span class=\"string\">&#x27;uptoken&#x27;</span>] = token</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(res)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;七牛云&lt;/h1&gt;</span><br><span class=\"line\">    &#123;&#123; imgLoadPercent &#125;&#125;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">input</span> @change=<span class=\"string\">&quot;uploadInputchange&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;uploadFileInput&quot;</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;file&quot;</span> /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      uptoken: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      imgLoadPercent: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    get_token() &#123;</span><br><span class=\"line\">      // 这里是获取七牛云token那个路由</span><br><span class=\"line\">      this.axios.get(&quot;http://localhost:8000/uptoken/&quot;).then((result) =&gt; &#123;</span><br><span class=\"line\">        console.log(result);</span><br><span class=\"line\">        this.uptoken = result.data.uptoken;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //触发<span class=\"built_in\">input</span> change事件</span><br><span class=\"line\">    uploadInputchange() &#123;</span><br><span class=\"line\">      let file = document.getElementById(<span class=\"string\">&quot;uploadFileInput&quot;</span>).files[<span class=\"number\">0</span>]; //选择的图片文件</span><br><span class=\"line\">      this.get_token();</span><br><span class=\"line\">      this.uploadImgToQiniu(file);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //上传图片到七牛</span><br><span class=\"line\">    uploadImgToQiniu(file) &#123;</span><br><span class=\"line\">      console.log(this.uptoken);</span><br><span class=\"line\"></span><br><span class=\"line\">      const axiosInstance = this.axios.create(&#123; withCredentials: false &#125;); //withCredentials 禁止携带cookie，带cookie在七牛上有可能出现跨域问题</span><br><span class=\"line\">      let data = new FormData();</span><br><span class=\"line\">      data.append(<span class=\"string\">&quot;token&quot;</span>, this.uptoken); //七牛需要的token</span><br><span class=\"line\">      data.append(<span class=\"string\">&quot;file&quot;</span>, file);</span><br><span class=\"line\">      axiosInstance(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        url: <span class=\"string\">&quot;http://up-z1.qiniu.com/&quot;</span>, //上传地址，华北的空间是 up-z1.qiniu.com</span><br><span class=\"line\">        data: data,</span><br><span class=\"line\">        timeout: <span class=\"number\">300000000</span>, //超时时间，因为图片上传有可能需要很久</span><br><span class=\"line\">        onUploadProgress: (e) =&gt; &#123;</span><br><span class=\"line\">          //imgLoadPercent 是上传进度，可以用来添加进度条</span><br><span class=\"line\"></span><br><span class=\"line\">          var complete = e.loaded / e.total;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (complete &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            this.imgLoadPercent = (complete * <span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">&quot;%&quot;</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">        .then((data) =&gt; &#123;</span><br><span class=\"line\">          console.log(data);</span><br><span class=\"line\">          this.imgLoadPercent = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(function (err) &#123;</span><br><span class=\"line\">          //上传失败</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/06/0b11/",
            "url": "https://vf77.cn/2021/05/06/0b11/",
            "title": "数据库连接池,异步",
            "date_published": "2021-05-06T00:45:53.025Z",
            "content_html": "<h4 id=\"数据库连接池\"><a class=\"markdownIt-Anchor\" href=\"#数据库连接池\">#</a> 数据库连接池</h4>\n<p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 连接池 --- 节约了建立链接和关闭链接的操作(可以帮助我们提高效率)</span></span><br><span class=\"line\">pool = redis.ConnectionPool()</span><br><span class=\"line\"><span class=\"comment\"># 从链接池获取链接,当需要的时候从里面取出一个空闲的连接,当不需要时再放回去</span></span><br><span class=\"line\">conn = redis.Redis(connection_pool=pool)</span><br><span class=\"line\">conn.<span class=\"built_in\">set</span>(<span class=\"string\">&quot;test1&quot;</span>, <span class=\"string\">&quot;test1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(conn.get(<span class=\"string\">&quot;test1&quot;</span>))</span><br><span class=\"line\">例子: 在生活中就类似于学校食堂中的那个打饭的勺子</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h4>\n<p>同步是指完成事务的逻辑，先执行第一个事务，如果阻塞了，会一直等待，直到这个事务完成，再执行第二个事务，顺序执行</p>\n<p>异步是和同步相对的，异步是指在处理调用这个事务的之后，不会等待这个事务的处理结果，直接处理第二个事务去了，通过状态、通知、回调来通知调用者处理结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 异步使用 async 关键字</span></span><br><span class=\"line\"><span class=\"comment\"># 当方法前面加上了 async 那么就变为了一个异步方法</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">\t\t<span class=\"comment\"># 在异步方法内部所有的耗时操作(调用别的方法或调别的外部的方法)都必须加上 await(不需要等待,主动给你返回结果) 当有await存在时那么就绝对存在async</span></span><br><span class=\"line\">\t\tr = <span class=\"keyword\">await</span> client.get(url,params=data)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> httpx.AsyncClient() <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">        <span class=\"comment\"># 建立任务列表</span></span><br><span class=\"line\">        task_list = []</span><br><span class=\"line\">        <span class=\"comment\"># 写个循环 (类似于修跑道)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        \t<span class=\"comment\"># 将你要异步执行的东西塞到这里列表里面</span></span><br><span class=\"line\">            req = request(client)</span><br><span class=\"line\">            task = asyncio.create_task(req)</span><br><span class=\"line\">            task_list.append(task)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.gether(*task_list)</span><br><span class=\"line\"><span class=\"comment\"># 类似于 10 个人进行跑步,同步只有一条跑道,而异步却有10条跑道</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/06/0b10/",
            "url": "https://vf77.cn/2021/05/06/0b10/",
            "title": "MongoDB",
            "date_published": "2021-05-06T00:36:18.685Z",
            "content_html": "<h4 id=\"mobgodb\"><a class=\"markdownIt-Anchor\" href=\"#mobgodb\">#</a> MobgoDB</h4>\n<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<h4 id=\"mongodb优点\"><a class=\"markdownIt-Anchor\" href=\"#mongodb优点\">#</a> MongoDB 优点</h4>\n<p>弱一致性 (最终一致)，更能保证用户的访问速度</p>\n<p>文档结构的存储方式，能够更便捷的获取数据</p>\n<p>内置 GridFS，支持大容量的存储</p>\n<p>内置 Sharding</p>\n<p>第三方支持丰富</p>\n<p>性能优越</p>\n<h4 id=\"mongodb基础命令\"><a class=\"markdownIt-Anchor\" href=\"#mongodb基础命令\">#</a> MongoDB 基础命令</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shwo dbs   查看所有数据库</span><br><span class=\"line\">use 数据库名   (若是有该数据库则进入,若是没有则创建)</span><br><span class=\"line\">db   查看当前所在的数据库</span><br><span class=\"line\">db.createCollection(<span class=\"string\">&quot;表名&quot;</span>)   创建表</span><br><span class=\"line\">show tables  |  show collections   查看该数据库内的所有表</span><br><span class=\"line\">db.表名.insert()   向被指定的表内添加数据</span><br><span class=\"line\">db.表名.find()   查看被指定表内的所有数据 也可以增加限制条件 dinf_one() 是只查看一个</span><br><span class=\"line\">db.dropDatabase()   删除当前所在的数据库</span><br></pre></td></tr></table></figure>\n<h4 id=\"python使用mongodb\"><a class=\"markdownIt-Anchor\" href=\"#python使用mongodb\">#</a> Python 使用 MongoDB</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\"><span class=\"comment\"># 和MongoDB建立连接 默认端口为27017</span></span><br><span class=\"line\">mongo_client = pymongo.MongoClient(host=<span class=\"string\">&quot;localhost&quot;</span>, port=<span class=\"number\">27017</span>)</span><br><span class=\"line\"><span class=\"comment\"># 与某个数据库建立连接</span></span><br><span class=\"line\">db = mongo_client.数据库</span><br><span class=\"line\"><span class=\"comment\"># 与数据库中的某一个表</span></span><br><span class=\"line\">table = db.表名</span><br><span class=\"line\"><span class=\"comment\"># find_one是查找一个</span></span><br><span class=\"line\"><span class=\"comment\"># find是查找多个</span></span><br><span class=\"line\">res = table.find_one(&#123;<span class=\"string\">&quot;tid&quot;</span>: <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\">res = <span class=\"built_in\">eval</span>(res[<span class=\"string\">&quot;tem&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/06/0b09/",
            "url": "https://vf77.cn/2021/05/06/0b09/",
            "title": "百度云识别本地图片文字",
            "date_published": "2021-05-06T00:34:36.800Z",
            "content_html": "<h4 id=\"百度云识别本地图片文字\"><a class=\"markdownIt-Anchor\" href=\"#百度云识别本地图片文字\">#</a> 百度云识别本地图片文字</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们首先需要在百度云的文字识别模块内建立一个应用,并且获取到该应用的: API Key 和 Secret Key</span></span><br><span class=\"line\">res = requests.get(<span class=\"string\">&quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=(你的API Key)&amp;client_secret=(你的Secret Key)&quot;</span>)</span><br><span class=\"line\">res = json.loads(<span class=\"built_in\">str</span>(res.text))</span><br><span class=\"line\">token = res[<span class=\"string\">&#x27;access_token&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">temp_url = <span class=\"string\">&#x27;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=&#x27;</span> + token</span><br><span class=\"line\">temp_headers = &#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将图片验证码保存到本地,这里我们并不需要担心图片验证码过多,我们已经将要保存的图片进行了命名,所以会顶替掉</span></span><br><span class=\"line\">img_src = <span class=\"string\">&quot;http://localhost:8000/code/&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 这里的路径可以自己设置</span></span><br><span class=\"line\">urllib.request.urlretrieve(img_src, <span class=\"string\">&#x27;C:/Users/guao/Desktop/jie图/Ceshi/1.png&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 所读取的文件路径</span></span><br><span class=\"line\">temp_file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;C:/Users/guao/Desktop/jie图/Ceshi/1.png&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">temp_image = temp_file.read()</span><br><span class=\"line\">temp_file.close()</span><br><span class=\"line\">temp_data = &#123;<span class=\"string\">&#x27;image&#x27;</span>: base64.b64encode(temp_image)&#125;</span><br><span class=\"line\">temp_data = urllib.parse.urlencode(temp_data)</span><br><span class=\"line\">temp_res = requests.post(url=temp_url, data=temp_data, headers=temp_headers)</span><br><span class=\"line\"></span><br><span class=\"line\">res = json.loads(<span class=\"built_in\">str</span>(temp_res.text))</span><br><span class=\"line\">code = res[<span class=\"string\">&#x27;words_result&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;words&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(code)</span><br><span class=\"line\"><span class=\"comment\"># 由于百度云所识别的文字有可能含有空格,所以我们需要去除空格</span></span><br><span class=\"line\">code = code.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(code)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/06/0b08/",
            "url": "https://vf77.cn/2021/05/06/0b08/",
            "title": "Docker",
            "date_published": "2021-05-06T00:21:11.789Z",
            "content_html": "<h4 id=\"docker\"><a class=\"markdownIt-Anchor\" href=\"#docker\">#</a> Docker</h4>\n<p>Docker 是一个开源的应用容器引擎，基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9nby9nby10dXRvcmlhbC5odG1s\">Go 语言</span>   并遵从 Apache2.0 协议开源。</p>\n<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）, 更重要的是容器性能开销极低。</p>\n<h4 id=\"优势\"><a class=\"markdownIt-Anchor\" href=\"#优势\">#</a> 优势</h4>\n<p><strong>更高效的利用系统资源</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker对系统资源的利用率更高，无论是应用执行速度，内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机往往可以运行更多数量的应用。</span><br></pre></td></tr></table></figure>\n<p><strong>更快速的启动时间</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">传统的虚拟机技术启动应用服务往往需要数分钟，而docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级，甚至毫秒级的启动时间，大大的节约了开发测试，部署的时间。</span><br></pre></td></tr></table></figure>\n<p><strong>一致的运行环境</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发过程中常见的一个问题是环境一致问题，由于开发环境，测试环境，生产环境不一致，导致有些bug并未在开发过程中发现。而docker的镜像提供了除内核外完整的运行时环境，确保环境一致性，从而不会在出现“这段代码在我机器上没问题”这类问题。</span><br></pre></td></tr></table></figure>\n<p><strong>持续支付和部署</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对开发和运维人员来说，最希望就是一次创建和部署，可以在任意的地方运行。（定制应用镜像来实现集成、持续支付、部署。开发人员可以通过dockerfile来进行镜像构建，并结合持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合持续部署系统进行自动部署）。而且使用dockerfile使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</span><br></pre></td></tr></table></figure>\n<p><strong>更轻松的迁移</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于docker确保了执行环境的一致性，使得应用的迁移更加的容易。docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云、甚至是笔记本、其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</span><br></pre></td></tr></table></figure>\n<p><strong>更轻松的维护和拓展</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得十分简单。此外，docker团队同各个开源项目团队一起维护了一大批高质量的官网镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</span><br></pre></td></tr></table></figure>\n<h4 id=\"docker配置源\"><a class=\"markdownIt-Anchor\" href=\"#docker配置源\">#</a> Docker 配置源</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先输入: docker-machine ssh default</span><br><span class=\"line\">再进行源的配置: sudo sed -i <span class=\"string\">&quot;s|EXTRA_ARGS=&#x27;|EXTRA_ARGS=&#x27;--registry-mirror=https://d7grpode.mirror.aliyuncs.com |g&quot;</span> /var/lib/boot2docker/profile</span><br><span class=\"line\">配置完成之后输入: exit 退出</span><br><span class=\"line\"></span><br><span class=\"line\">然后输入: docker-machine restart default</span><br><span class=\"line\">最后输入: docker info 查看即可</span><br></pre></td></tr></table></figure>\n<h4 id=\"docker基础命令\"><a class=\"markdownIt-Anchor\" href=\"#docker基础命令\">#</a> Docker 基础命令</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker info 显示Docker系统信息,包括镜像和容器数</span><br><span class=\"line\">docker images 用于查看本地已拥有的镜像</span><br><span class=\"line\">docker pull redis(镜像名称) 拉取所需要的镜像</span><br><span class=\"line\">docker save -o <span class=\"string\">&#x27;c:/tmp/redis.tar&#x27;</span> redis 将images中所显示的镜像下载到本地文件夹中</span><br><span class=\"line\">docker load -i <span class=\"string\">&#x27;c:tmp/redis.tar&#x27;</span> 将本地的镜像下载到Docker</span><br><span class=\"line\">docker rmi -f 镜像ID 利用dockerimages中所显示的IMAGE ID删除镜像</span><br><span class=\"line\">docker ps 显示正在运行中的容器</span><br><span class=\"line\">docker ps -a 显示所有容器</span><br><span class=\"line\"></span><br><span class=\"line\">容器ID是docker -a 中的CONTAINER ID所显示的ID</span><br><span class=\"line\">docker stop 容器ID 结束正在运行中的容器</span><br><span class=\"line\">docker start 容器ID 运行容器ID所对应的容器</span><br><span class=\"line\">docker rm 容器ID 删除容器ID对应的容器</span><br><span class=\"line\"></span><br><span class=\"line\">dockerd-machine ip default 获取本机所分配的IP</span><br><span class=\"line\">docker run -p <span class=\"number\">6380</span>:<span class=\"number\">6379</span>(端口号) redis 运行指定的容器(redis)</span><br><span class=\"line\"></span><br><span class=\"line\">win+R 输入 cmd</span><br><span class=\"line\">连接docker所启动的容器</span><br><span class=\"line\">redis-cli -h <span class=\"number\">192.168</span><span class=\"number\">.99</span><span class=\"number\">.100</span> -p <span class=\"number\">3680</span>   这里是运行的是<span class=\"number\">6380</span>端口号</span><br><span class=\"line\">默认端口为<span class=\"number\">6379</span></span><br><span class=\"line\">可以直接在终端输入redis-cli 运行</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/06/0b07/",
            "url": "https://vf77.cn/2021/05/06/0b07/",
            "title": "构建树结构",
            "date_published": "2021-05-06T00:14:50.236Z",
            "content_html": "<h4 id=\"课程分类\"><a class=\"markdownIt-Anchor\" href=\"#课程分类\">#</a> 课程分类</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 转换数据类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dictfetchall</span>(<span class=\"params\">cursor</span>):</span></span><br><span class=\"line\">    desc = cursor.description</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [</span><br><span class=\"line\">        <span class=\"built_in\">dict</span>(<span class=\"built_in\">zip</span>([col[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> col <span class=\"keyword\">in</span> desc], row))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cursor.fetchall()</span><br><span class=\"line\">    ]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取课程分类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cate</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 建立查询游标</span></span><br><span class=\"line\">    cursor = connection.cursor()</span><br><span class=\"line\">    <span class=\"comment\"># 执行sql语句</span></span><br><span class=\"line\">    cursor.execute(</span><br><span class=\"line\">        <span class=\"string\">&quot;SELECT * FROM cate&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\"># 获取结果集</span></span><br><span class=\"line\">    <span class=\"comment\"># res = cursor.fetchall()</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 这里调用了以前的数据转换函数(前面的笔记记得有)</span></span><br><span class=\"line\">    res = dictfetchall(cursor)</span><br><span class=\"line\">    <span class=\"comment\"># 调用get_tree函数进行 强转</span></span><br><span class=\"line\">    res = get_tree(res)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(json.dumps(res, indent=<span class=\"number\">4</span>, ensure_ascii=<span class=\"literal\">False</span>), content_type=<span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构造课程分类层级关系(树)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tree</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">    lists = []</span><br><span class=\"line\">    tree = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 把根节点的ID作为key存在,把值作为value存在</span></span><br><span class=\"line\">        tree[item[<span class=\"string\">&#x27;id&#x27;</span>]] = item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">        <span class=\"comment\"># 如果表中的自关联pid不存在,则表示它是初始ID(根)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> i[<span class=\"string\">&#x27;pid&#x27;</span>]:</span><br><span class=\"line\">            lists.append(tree[i[<span class=\"string\">&#x27;id&#x27;</span>]])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parent_id = i[<span class=\"string\">&#x27;pid&#x27;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 如果子级不存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&quot;children&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> tree[parent_id]:</span><br><span class=\"line\">                tree[parent_id][<span class=\"string\">&#x27;children&#x27;</span>] = []</span><br><span class=\"line\">            tree[parent_id][<span class=\"string\">&#x27;children&#x27;</span>].append(tree[i[<span class=\"string\">&#x27;id&#x27;</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists</span><br></pre></td></tr></table></figure>",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/03/0b06/",
            "url": "https://vf77.cn/2021/05/03/0b06/",
            "title": "运算基础,装饰器权限",
            "date_published": "2021-05-03T06:23:25.932Z",
            "content_html": "<h4 id=\"运算基础\"><a class=\"markdownIt-Anchor\" href=\"#运算基础\">#</a> 运算基础</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计算机中的格式为二进制,以(零)0b开头的为二进制的变量: </span><br><span class=\"line\">满二进一: <span class=\"number\">0b01</span>:<span class=\"number\">1</span>   <span class=\"number\">0b10</span>:<span class=\"number\">2</span>   <span class=\"number\">0b11</span>:<span class=\"number\">3</span>   <span class=\"number\">0b100</span>:<span class=\"number\">4</span>   <span class=\"number\">0b101</span>:<span class=\"number\">5</span>   <span class=\"number\">0b110</span>:<span class=\"number\">6</span>   <span class=\"number\">0b111</span>:<span class=\"number\">7</span>   <span class=\"number\">0b1000</span>:<span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">位语运算(判断偶):要判断的数据 &amp; <span class=\"number\">1</span> 如果返回值为<span class=\"number\">0</span>则为偶数,反之则为奇数 </span><br><span class=\"line\">位于运算(位移操作 右小,左大):<span class=\"number\">0b10</span>&gt;&gt;<span class=\"number\">1</span> :<span class=\"number\">1</span>   <span class=\"number\">0b10</span>&lt;&lt;<span class=\"number\">1</span> :<span class=\"number\">4</span></span><br><span class=\"line\">折半查找: <span class=\"number\">100</span>&gt;&gt;<span class=\"number\">1</span> :<span class=\"number\">50</span>   <span class=\"number\">100</span>&lt;&lt;<span class=\"number\">1</span> :<span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\">十进制转换二进制: <span class=\"built_in\">bin</span>(十进制数据)</span><br><span class=\"line\">简单思想:开始数据%<span class=\"number\">2</span>得到余数 开始数据//<span class=\"number\">2</span>得到整数 再拿得到的整数%<span class=\"number\">2</span>得到余数 按照这个顺序除到无法再除,再进行倒序排列即可: <span class=\"number\">13</span> 得到<span class=\"number\">1011</span> 二进制<span class=\"number\">0b1101</span></span><br><span class=\"line\"></span><br><span class=\"line\">手写代码:</span><br><span class=\"line\">    <span class=\"comment\"># 实现栈 (先进后出,比如水壶中的水,或者弹夹中的子弹)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            self.items=[]</span><br><span class=\"line\">        <span class=\"comment\"># 判断是否为空</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.items == []</span><br><span class=\"line\">        <span class=\"comment\"># 入栈</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.items.append(item)</span><br><span class=\"line\">        <span class=\"comment\"># 出栈</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.items.pop()</span><br><span class=\"line\">        \t<span class=\"comment\"># return self.items.pop(0)</span></span><br><span class=\"line\">\t<span class=\"comment\"># 十进制转换二进制</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">transform</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">        stack = Stack()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> num != <span class=\"number\">0</span>:</span><br><span class=\"line\">            res = num % <span class=\"number\">2</span></span><br><span class=\"line\">            num = <span class=\"built_in\">int</span>(num / <span class=\"number\">2</span>)</span><br><span class=\"line\">            stack.push(res)</span><br><span class=\"line\">        s = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> stack.is_empty():</span><br><span class=\"line\">            s += <span class=\"built_in\">str</span>(stack.pop())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(transform(<span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入数字: &quot;</span>))))</span><br><span class=\"line\"><span class=\"comment\"># 十进制转换二进制</span></span><br><span class=\"line\"><span class=\"comment\"># n = int(input(&quot;请输入数字: &quot;))</span></span><br><span class=\"line\"><span class=\"comment\"># # x = 2  # 转换为二进制，所以这里取x=2</span></span><br><span class=\"line\"><span class=\"comment\"># b = []  # 存储余数</span></span><br><span class=\"line\"><span class=\"comment\"># while True:  # 一直循环，商为0时利用break退出循环</span></span><br><span class=\"line\"><span class=\"comment\">#     s = n // 2  # 整数</span></span><br><span class=\"line\"><span class=\"comment\">#     y = n % 2  # 余数</span></span><br><span class=\"line\"><span class=\"comment\">#     b = b + [y]  # 每一个余数存储到b中</span></span><br><span class=\"line\"><span class=\"comment\">#     if s == 0:</span></span><br><span class=\"line\"><span class=\"comment\">#         break  # 余数为0时结束循环</span></span><br><span class=\"line\"><span class=\"comment\">#     n = s</span></span><br><span class=\"line\"><span class=\"comment\"># b.reverse()  # 使b中的元素反向排列</span></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;该数字转换为二进制后是：&#x27;, b)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"装饰器权限\"><a class=\"markdownIt-Anchor\" href=\"#装饰器权限\">#</a> 装饰器权限</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user = <span class=\"number\">0b111</span><span class=\"comment\">#若是想要没有让其拥有权限可以改为 0b110</span></span><br><span class=\"line\">permission = <span class=\"number\">0b001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_decorator</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 若是想要在Django中使用装饰器,需要将wrapper(request, *args, **kwargs)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(args)</span><br><span class=\"line\">        <span class=\"comment\"># 利用位语运算来判断是否有上传头像的资格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> user &amp; args[<span class=\"number\">0</span>]:</span><br><span class=\"line\">    <span class=\"comment\"># Django: return func(request, *args, **kwargs)</span></span><br><span class=\"line\">            func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Django: return HttpResponse(&quot;您没有权限&quot;)</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您没有权限&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传头像</span></span><br><span class=\"line\"><span class=\"meta\">@my_decorator</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upload_img</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    这里写的是你的执行代码</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">prinf(upload_img(permission))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Djnago中使用</span></span><br><span class=\"line\"><span class=\"comment\"># @my_decorator</span></span><br><span class=\"line\"><span class=\"comment\"># def upload_img(request):</span></span><br><span class=\"line\"><span class=\"comment\">#     return HttpResponse(&quot;上传成功&quot;)</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/03/0b05/",
            "url": "https://vf77.cn/2021/05/03/0b05/",
            "title": "权限模型",
            "date_published": "2021-05-03T05:50:04.018Z",
            "content_html": "<h4 id=\"权限模式\"><a class=\"markdownIt-Anchor\" href=\"#权限模式\">#</a> 权限模式</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">权限模型分为三类: ACL,RBAC,ABAC</span><br><span class=\"line\">ACL权限模型： 基于用户的权限认证体系（面向资源的访问控制模型）</span><br><span class=\"line\">给每个用户指定相应的权限。典型的例子为： 微软的文件系统权限</span><br><span class=\"line\">优点： 几乎不需要任何基础设施就可以完成访问控制。</span><br><span class=\"line\">缺点： 对权限的管理比较分散，无法集中管理。无法一次性将某种权限分给一群用户，也无法一次性回收。</span><br><span class=\"line\"></span><br><span class=\"line\">RBAC权限模型： 是基于角色的访问控制</span><br><span class=\"line\">权限的分配和回收都是基于角色的，只有对于的角色有相应的权限。用户可以拥有一种或多种角色。</span><br><span class=\"line\">优点： 权限的管理非常方便，权限只与角色相关，不与用户产生直接的关联。</span><br><span class=\"line\"></span><br><span class=\"line\">ABAC权限模型： 基于属性的权限控制(类似于指定时间内只能干什么)</span><br><span class=\"line\">可以根据属性来进行管理，比如： 允许老师们在10：00到12：00提前放学</span><br><span class=\"line\">优点： 集中化管理，可以根据需求来实现不同的权限管理</span><br><span class=\"line\">缺点： 管理起来非常复杂且不直观，规则如果稍微复杂，或者设计混乱，会给管理者维护和追查带来麻烦，不能直观的看出用户和对象间的关系。</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/03/0b04/",
            "url": "https://vf77.cn/2021/05/03/0b04/",
            "title": "JWT,Vue状态保持",
            "date_published": "2021-05-03T05:33:50.687Z",
            "content_html": "<h4 id=\"jwt\"><a class=\"markdownIt-Anchor\" href=\"#jwt\">#</a> JWT</h4>\n<p>Json web token（JWT）根据官网的定义，是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（(RFC 7519). 该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 想要使用JWT 首先需要导包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jwt</span><br><span class=\"line\"><span class=\"comment\"># 进行编码 进行编码的数据只能是字典类型 &#123;&quot;键&quot;:值&#125; 参数依次为:编码的数据,密钥,算法</span></span><br><span class=\"line\">encode_jwt = jwt.encode(要编码的信息,<span class=\"string\">&quot;密钥(123 可以自定义)&quot;</span>,algorithm=<span class=\"string\">&quot;HS256&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行强转 若是PyJWT版本过高,则会自动帮你完成强转 当前所使用的版本1.7.1</span></span><br><span class=\"line\">encode_str = <span class=\"built_in\">str</span>(encode_jwt,<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行解密 参数依次为: 要解密的信心,以及之前进行编码的密钥</span></span><br><span class=\"line\">decode_jwt = jwt.decode(encode_str,<span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"状态保持\"><a class=\"markdownIt-Anchor\" href=\"#状态保持\">#</a> 状态保持</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue中像浏览器存储数据的方法有三种: localStorage, sessionStorage, cookie</span><br><span class=\"line\">其中sessionStorage和localStorage都是在浏览器端用来存储数据的对象，它们也只在浏览器里有作用不会被发送到服务器端。</span><br><span class=\"line\">经常使用的是 localStorage.sessionStorage(目前只会这两个)</span><br><span class=\"line\"></span><br><span class=\"line\">sessionStorage.localStorage: </span><br><span class=\"line\">当你关闭浏览器之后sessionStorage所保持的数据会被销毁</span><br><span class=\"line\">localStorage所保持的数据不会消亡，只要创建了并且我们没有手动销毁（或者清除浏览器历史）就会一直存在于我们的浏览器中</span><br><span class=\"line\"></span><br><span class=\"line\">代码操作: </span><br><span class=\"line\">.setItem(<span class=\"string\">&quot;键名&quot;</span>,值) 这是用来保持数据的</span><br><span class=\"line\">.getItem(<span class=\"string\">&quot;键名&quot;</span>) 这个是用来获取我们之前所保持的数据</span><br><span class=\"line\">.removeItem(<span class=\"string\">&quot;键名&quot;</span>) 清除该数据名的数据 也就是删除了这对数据</span><br><span class=\"line\">上述的这些方法使用localStorage 也可以使用</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/03/0b03/",
            "url": "https://vf77.cn/2021/05/03/0b03/",
            "title": "自动测试脚本,生成图片验证码",
            "date_published": "2021-05-03T05:28:25.913Z",
            "content_html": "<h4 id=\"自动测试脚本\"><a class=\"markdownIt-Anchor\" href=\"#自动测试脚本\">#</a> 自动测试脚本</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">导包: <span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成浏览器对象(对象),这里选择的是谷歌浏览器</span></span><br><span class=\"line\">browser = webdriver.Chrome(<span class=\"string\">&quot;绝对路径&quot;</span>)  需要把 \\ 换为 /  若是不想换则可以写为 \\\\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置要测试的前端页面</span></span><br><span class=\"line\">browser.get(<span class=\"string\">&quot;路由&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置需要测试的数据 这里需要指定测试数据所处的 标签(可以利用元素选择器来帮助我们来快速选中) [1]代表着下标</span></span><br><span class=\"line\">browser.find_elements_by_tag_name(<span class=\"string\">&quot;标签&quot;</span>)[<span class=\"number\">1</span>].send_keys(<span class=\"string\">&quot;测试数据&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若是想要自动测试滑动模块首先导包</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"comment\"># 拖拽动作</span></span><br><span class=\"line\">action = ActionChains(browser)</span><br><span class=\"line\"><span class=\"comment\"># 获取要拖拽对象的 标签(也就是滑动模块的那个小圆圈)</span></span><br><span class=\"line\">button = browser.find_element_by_class_name(<span class=\"string\">&quot;唯一标识&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 设置鼠标按住不松,拖动 .perform代表着确认(只要涉及到了动作,都需要进行确认)</span></span><br><span class=\"line\">action.click_and_hold(button).perform()</span><br><span class=\"line\"><span class=\"comment\"># 开始执行动作</span></span><br><span class=\"line\">action.reset_actions()</span><br><span class=\"line\"><span class=\"comment\"># move代表着移动左边是X轴坐标,右边是Y轴坐标,其中X轴是代表着横向(左右),Y轴代表着纵向(上下)</span></span><br><span class=\"line\">action.move_by_offset(x, y).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 图片验证码 StrictRedis作用详情见: 图片验证码</span></span><br><span class=\"line\">res = StrictRedis()</span><br><span class=\"line\"><span class=\"comment\"># 这里是将图片验证码所生成的数字提前保存到了redis中,所以可以直接.get获取并进行转码</span></span><br><span class=\"line\">img_code = res.get(<span class=\"string\">&quot;code&quot;</span>).decode()</span><br><span class=\"line\">browser.find_elements_by_tag_name(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">3</span>].send_keys(img_code)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置自动点击按钮 .click()</span></span><br><span class=\"line\">browser.find_element_by_class_name(<span class=\"string\">&quot;按钮的唯一标识(不要重复)&quot;</span>).click()</span><br><span class=\"line\"><span class=\"comment\"># 关闭浏览器</span></span><br><span class=\"line\">browser.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"图片验证码\"><a class=\"markdownIt-Anchor\" href=\"#图片验证码\">#</a> 图片验证码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先定义验证码类</span></span><br><span class=\"line\">cladd MyCode(View):</span><br><span class=\"line\">\t<span class=\"comment\"># 内置类方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_random_color</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 随机生成三个颜色</span></span><br><span class=\"line\">\t\tR = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">\t\tG = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">\t\tB = random.randrange(<span class=\"number\">255</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (R,G,B)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self,request</span>):</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 自定义画布,第一个参数为宽,第二个参数为高</span></span><br><span class=\"line\">\t\timg_size = (<span class=\"number\">120</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义图像对象,参数依次为 文字颜色,画布,画布颜色</span></span><br><span class=\"line\">\t\timage = Image.new(<span class=\"string\">&quot;RGB&quot;</span>, img_size, <span class=\"string\">&quot;white&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义画笔</span></span><br><span class=\"line\">\t\tdraw = ImageDraw.Draw(image, <span class=\"string\">&quot;RGB&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 自定义字符串</span></span><br><span class=\"line\">\t\tsource = <span class=\"string\">&quot;0123456789qweasdzxcrtyfghvbn&quot;</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 定义容器</span></span><br><span class=\"line\">\t\tcode_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\"># 循环四次</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 获取字符颜色</span></span><br><span class=\"line\">\t\t\ttext_color = self.get_random_color()</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 获取随机字符下标</span></span><br><span class=\"line\">\t\t\ttmp_num = random.randrange(<span class=\"built_in\">len</span>(source))</span><br><span class=\"line\">\t\t\trandom_str = source[tmp_num]</span><br><span class=\"line\">\t\t\tcode_str += random_str</span><br><span class=\"line\">\t\t\tdraw.text((<span class=\"number\">20</span> + <span class=\"number\">30</span> * i, <span class=\"number\">30</span>), random_str, text_color)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tbuf = io.BytesIO()</span><br><span class=\"line\">        <span class=\"comment\"># 保存在内存中,并转换为png格式</span></span><br><span class=\"line\">\t\timage.save(buf,<span class=\"string\">&quot;png&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"comment\"># 保存验证码在session中 request.session你可以将它看成一个全局变量</span></span><br><span class=\"line\">        \t<span class=\"comment\"># 获取值: request.session.get(&quot;键名&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\trequest.session[<span class=\"string\">&#x27;code&#x27;</span>] = code_str</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        # 方法一: </span></span><br><span class=\"line\"><span class=\"string\">        # 有些电脑可能无法使用 request.session那么可以使用StrictRedis来代替</span></span><br><span class=\"line\"><span class=\"string\">        # 首先导包: </span></span><br><span class=\"line\"><span class=\"string\">        from redis import StrictRedis</span></span><br><span class=\"line\"><span class=\"string\">        # 打开StrictRedis</span></span><br><span class=\"line\"><span class=\"string\">        res = StrictRedis()</span></span><br><span class=\"line\"><span class=\"string\">        # 保存</span></span><br><span class=\"line\"><span class=\"string\">        res.set(&quot;code&quot;, code_str)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        # 若是想要在别的地方获取数据: </span></span><br><span class=\"line\"><span class=\"string\">        # 首先打开StrictRedis</span></span><br><span class=\"line\"><span class=\"string\">        res = StrictRedis()</span></span><br><span class=\"line\"><span class=\"string\">        # 然后获取到code 再进行解密</span></span><br><span class=\"line\"><span class=\"string\">        img_code = res.get(&quot;code&quot;).decode()</span></span><br><span class=\"line\"><span class=\"string\">        # 这样就可以在别的地方拿到code的值了</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        # 方法二</span></span><br><span class=\"line\"><span class=\"string\">        # 赋值</span></span><br><span class=\"line\"><span class=\"string\">        r = redis.Redis()</span></span><br><span class=\"line\"><span class=\"string\">        code = r.set(&quot;code&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        # 取值</span></span><br><span class=\"line\"><span class=\"string\">        r = redis.Redis()</span></span><br><span class=\"line\"><span class=\"string\">        code = r.get(&quot;code&quot;)</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> HttpResponse(buf.getvalue(),<span class=\"string\">&quot;image/png&quot;</span>)\t\t</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将该图片显示在Vue 中</span></span><br><span class=\"line\">&lt;van-cell-group&gt;</span><br><span class=\"line\">    &lt;img :src=<span class=\"string\">&quot;src&quot;</span> @click=<span class=\"string\">&quot;changecode&quot;</span> /&gt;</span><br><span class=\"line\">    <span class=\"comment\"># src为上述MyCode视图的路由   点击事件是确保点击一下换一下图片</span></span><br><span class=\"line\">&lt;/van-cell-group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;van-field v-model=<span class=\"string\">&quot;code&quot;</span> label=<span class=\"string\">&quot;验证码&quot;</span> placeholder=<span class=\"string\">&quot;请输入验证码&quot;</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击事件内写上: </span></span><br><span class=\"line\"><span class=\"comment\"># 这样写的原因是url只要传随机参数,url立刻就会被刷新</span></span><br><span class=\"line\">changecode:function()&#123;</span><br><span class=\"line\">\t<span class=\"comment\"># 随机数</span></span><br><span class=\"line\">\tvar num = Math.ceil(Math.random()*<span class=\"number\">10</span>);</span><br><span class=\"line\">\tthis.src = this.src + <span class=\"string\">&quot;?num=&quot;</span>+num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">若是想要让样式更好看一点: </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    img&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 改变鼠标样式 pointer(可点击样式)</span></span><br><span class=\"line\">        cursor:pointer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/03/0b02/",
            "url": "https://vf77.cn/2021/05/03/0b02/",
            "title": "多方式登录,自定义方法,滑动模块",
            "date_published": "2021-05-03T03:29:31.673Z",
            "content_html": "<h4 id=\"多方式登录\"><a class=\"markdownIt-Anchor\" href=\"#多方式登录\">#</a> 多方式登录</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">多方式登录指的是使用 手机号,邮箱,账户或用户名等进行的登录方式</span><br><span class=\"line\">书写多方式登录有多种方式:</span><br><span class=\"line\">第一种: </span><br><span class=\"line\">\t只向后端传递两个值:username,password</span><br><span class=\"line\">\t利用Q函数来进行判断,假设密码加密过:</span><br><span class=\"line\">书写方式如下:</span><br><span class=\"line\"><span class=\"comment\"># 先判断这个账号是否存在</span></span><br><span class=\"line\">user=User.<span class=\"built_in\">object</span>.<span class=\"built_in\">filter</span>(Q(username=username)|Q(phone=username)|Q(email=username)).first()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> user:</span><br><span class=\"line\">\t\t<span class=\"comment\"># 将密码进行解密,并比较</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> check_password(password,user_li.password):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;成功&quot;</span>&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;失败&quot;</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>:<span class=\"string\">&quot;失败&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">第二种方式:</span><br><span class=\"line\">前端使用</span><br><span class=\"line\">&lt;van-tabs v-model=<span class=\"string\">&quot;active&quot;</span>&gt;</span><br><span class=\"line\">\t&lt;van-tab title=<span class=\"string\">&quot;用户名登录&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;van-field v-model=<span class=\"string\">&quot;username&quot;</span> label=<span class=\"string\">&quot;账号&quot;</span> placeholder=<span class=\"string\">&quot;请输入登录账号&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/van-tab&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;van-tab title=<span class=\"string\">&quot;手机名登录&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;van-field v-model=<span class=\"string\">&quot;phone&quot;</span> label=<span class=\"string\">&quot;手机号&quot;</span> placeholder=<span class=\"string\">&quot;请输入登录手机号&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/van-tab&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;van-tab title=<span class=\"string\">&quot;邮箱登录&quot;</span>&gt;</span><br><span class=\"line\">\t\t&lt;van-field v-model=<span class=\"string\">&quot;email&quot;</span> label=<span class=\"string\">&quot;邮箱&quot;</span> placeholder=<span class=\"string\">&quot;请输入登录邮箱&quot;</span> /&gt;</span><br><span class=\"line\">\t&lt;/van-tab&gt;</span><br><span class=\"line\">&lt;/van-tabs&gt;</span><br><span class=\"line\">方法: </span><br><span class=\"line\">向后端传递 username,phone,email,active的值</span><br><span class=\"line\">其中active的值默认为<span class=\"number\">0</span>: 也就是用户名登录</span><br><span class=\"line\">在后端,我们可以通过来判断actice的值来得到他使用的是什么登录方式</span><br><span class=\"line\"></span><br><span class=\"line\">后端代码如下: </span><br><span class=\"line\">        <span class=\"keyword\">if</span> active == <span class=\"number\">2</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(email=email).first()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> active == <span class=\"number\">1</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(phone=phone).first()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user = User.objects.<span class=\"built_in\">filter</span>(username=username).first()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(user, <span class=\"string\">&#x27;------------&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> check_password(password, user.password):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;成功&quot;</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;账号或者密码错误&quot;</span>, <span class=\"string\">&#x27;code&#x27;</span>: <span class=\"number\">405</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response(&#123;<span class=\"string\">&quot;msg&quot;</span>: <span class=\"string\">&quot;您的用户名或者密码错误&quot;</span>, <span class=\"string\">&#x27;code&#x27;</span>: <span class=\"number\">405</span>&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义测试接口\"><a class=\"markdownIt-Anchor\" href=\"#自定义测试接口\">#</a> 自定义测试接口</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST测试接口(自定义):</span><br><span class=\"line\">首先导包: <span class=\"keyword\">import</span> requests</span><br><span class=\"line\">赋值: data = &#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;password&quot;</span>:<span class=\"string\">&quot;7777777&quot;</span>&#125;</span><br><span class=\"line\">传值给相应接口: res = requests.post(<span class=\"string\">&quot;http://localhost:8000/register/&quot;</span>,data=data)</span><br><span class=\"line\"></span><br><span class=\"line\">GET测试接口(自定义):</span><br><span class=\"line\">GET测试接口与post测试接口没有什么区别,</span><br><span class=\"line\">唯一的区别就在于 传值</span><br><span class=\"line\">GET传值: res = requests.get(<span class=\"string\">&quot;http://localhost:8000/register/&quot;</span>,params=data)</span><br><span class=\"line\"></span><br><span class=\"line\">打印出返回的值,从而判断是否成功: <span class=\"built_in\">print</span>(res.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义加密\"><a class=\"markdownIt-Anchor\" href=\"#自定义加密\">#</a> 自定义加密</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自定义加密分为多种类型 下面要写的是 md5加密(单向加密,不可逆)</span><br><span class=\"line\">首先导包: <span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_password</span>(<span class=\"params\">mypass</span>):</span></span><br><span class=\"line\">\t<span class=\"comment\"># mypass的作用的接收传递过来的数据</span></span><br><span class=\"line\">\t<span class=\"comment\"># 生成对象 使用哈希md5加密方式</span></span><br><span class=\"line\">\tmd5 = hashlib.md5()</span><br><span class=\"line\">\t<span class=\"comment\"># 定义要加密的对象</span></span><br><span class=\"line\">\tsign_str = mypass</span><br><span class=\"line\">\t<span class=\"comment\"># 进行转码</span></span><br><span class=\"line\">\tsign_utf8 = <span class=\"built_in\">str</span>(sign_str).encode(encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># 进行加密</span></span><br><span class=\"line\">\tmd5.update(sign_utf8)</span><br><span class=\"line\">\t<span class=\"comment\"># 生成密文</span></span><br><span class=\"line\">\tmd5_server = md5.hexdigest()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 返回密文</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> md5_server</span><br></pre></td></tr></table></figure>\n<h4 id=\"滑动模块\"><a class=\"markdownIt-Anchor\" href=\"#滑动模块\">#</a> 滑动模块</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在Vue中若是想要使用第三方模板,首先需要导包 导包分为局部,全局</span><br><span class=\"line\">若是该包在整个项目中频繁使用则可以使用全局导包,反之则没有必要,否则会拖慢运行的速度</span><br><span class=\"line\"><span class=\"keyword\">import</span> dragVerify <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-drag-verify&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">声明组件后就可以使用了</span><br><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;dragVerify&quot;</span>:dragVerify</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">在div中写上:</span><br><span class=\"line\">&lt;van-cell-group&gt;</span><br><span class=\"line\">\t&lt;drag-verify :width=&quot;width&quot; :height=&quot;height&quot; :text=&quot;text&quot; ref=&quot;Verify&quot;&gt;&lt;/drag-verify&gt;</span><br><span class=\"line\">&lt;/van-cell-group&gt;</span><br><span class=\"line\">其中的width是宽度,height是高度,text是现实在滑块中的提示文字; 这些值都需要到</span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">\t\twidth:<span class=\"number\">320</span>,</span><br><span class=\"line\">\t\theight:<span class=\"number\">42</span>,</span><br><span class=\"line\">\t\ttext:<span class=\"string\">&quot;请您拨动滑块&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">中定义</span><br><span class=\"line\"></span><br><span class=\"line\">若是想要判断滑块是否到达底部</span><br><span class=\"line\">可以使用: this.$refs.Verify.isPassing 语句</span><br><span class=\"line\">该语句 若是滑块到达底部则会返回true,反之则会返回false</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        },
        {
            "id": "https://vf77.cn/2021/05/02/0b01/",
            "url": "https://vf77.cn/2021/05/02/0b01/",
            "title": "Hexo搭建个人博客",
            "date_published": "2021-05-02T03:14:12.244Z",
            "content_html": "<h4 id=\"什么是hexo\"><a class=\"markdownIt-Anchor\" href=\"#什么是hexo\">#</a> 什么是 Hexo?</h4>\n<p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 <span class=\"exturl\" data-url=\"aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi8=\">Markdown</span>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h4 id=\"安装hexo的运行环境\"><a class=\"markdownIt-Anchor\" href=\"#安装hexo的运行环境\">#</a> 安装 Hexo 的运行环境</h4>\n<p>由于 <strong>Hexo</strong> 是基于<strong> node</strong> 框架的，所以我们需要先安装 node，下载地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">https://nodejs.org/en/</span></p>\n<p>到官网下载 <strong>git</strong>，一路默认安装即可，下载地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZA==\">https://git-scm.com/download</span></p>\n<p><strong>node.js</strong> 安装完成之后可以输入 node -v 或 npm -v 来进行版本号查看</p>\n<p><strong>git</strong> 安装完成之后的查看方式是： 鼠标右键一下，看下是否有<strong> Git GUI Here</strong> 和<strong> Git Bash Here</strong></p>\n<p>当然，若是实在不会安装<strong> node</strong> 和 <strong>git</strong> 可以去 Google 或者百度上搜索安装教程</p>\n<h4 id=\"开始搭建\"><a class=\"markdownIt-Anchor\" href=\"#开始搭建\">#</a> 开始搭建</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先给你的博客找一个合适的位置。鼠标右键点击Git Bash Here或者在上面文件夹路径上面输入cmd打开终端</span><br><span class=\"line\">输入命令： npm install -g hexo-cli(安装hexo)</span><br><span class=\"line\">安装完成之后创建博客项目： hexo init blog（这里的blog是可以自己命名的）</span><br><span class=\"line\">这样我们就建立了一个blog文件夹</span><br><span class=\"line\">cd blog 进入其中，建立第一篇文章</span><br><span class=\"line\">hexo new myfirst(myfirst是文件名，也可以自定义)</span><br><span class=\"line\">之后直接运行就可以了: hexo server 或者 hexo s</span><br></pre></td></tr></table></figure>\n<p>当然，这样搭建完的的个人博客只能在本地使用，外人无法访问，所以我们需要部署到<strong> Git Hub</strong> 上面</p>\n<h4 id=\"创建仓库\"><a class=\"markdownIt-Anchor\" href=\"#创建仓库\">#</a> 创建仓库</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先在Git hub上面创建一个仓库： 仓库名规范为： 你的Git Hub用户名.github.io</span><br><span class=\"line\">这里有几个注意的地方： </span><br><span class=\"line\">注册的邮箱一定要验证，否则不会成功；</span><br><span class=\"line\">仓库命名必须是： username.github.io，其中username 就是你的用户名；</span><br></pre></td></tr></table></figure>\n<h4 id=\"绑定域名\"><a class=\"markdownIt-Anchor\" href=\"#绑定域名\">#</a> 绑定域名</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个域名不绑定也是没有问题的，比如说就用xxx。github.io 来进行访问，当然，如果你想要更个性一点，想拥有一个属于自己的域名，那也是OK的。</span><br><span class=\"line\">首先你需要注册一个域名，这里购买域名可以前往：godaddy或者阿里云</span><br><span class=\"line\">然后到你本地博客的source文件夹下面创建一个CNAME的文件（注意，没有后缀）</span><br><span class=\"line\">在CNAME内输入，你刚买的那个域名</span><br></pre></td></tr></table></figure>\n<h4 id=\"上传\"><a class=\"markdownIt-Anchor\" href=\"#上传\">#</a> 上传</h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上面的步骤完成之后在本地博客文件夹中的_config.yml中的deploy修改为: </span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: Git Hub创建的那个仓库的远程地址</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">修改完成之后，我们就可以在终端中输入 hexo g -d进行上传了</span><br><span class=\"line\">这里他刚上传上去默认使用的并不是域名： 所以我们需要点击仓库里面的settings按钮，进入设置</span><br><span class=\"line\">之后点击Pages在Custom domain下面输入域名后点击Save即可</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "天道酬勤   厚德载物"
            ]
        }
    ]
}